using AsmJit.Common.Enums;
using static AsmJit.Common.Constants.X86;

namespace AsmJit.Common
{
    public class InstInfo
    {
        public readonly int ID;
        private static int idGenerator;
        internal readonly long PrimaryOpCode;
        internal readonly ExtendedInstructionInfo ExtendedInfo;

        internal InstInfo(long primaryOpCode, ExtendedInstructionInfo extendedInfo)
        {
            ID = idGenerator++;
            PrimaryOpCode = primaryOpCode;
            ExtendedInfo = extendedInfo;
        }

        internal bool IsJump() => ID >= Inst.Ja.ID && ID <= Inst.Jmp.ID;

        internal bool AssertValidity() => ID >= Inst.Xsetbv.ID && ID <= Inst.Adc.ID;
    }

    public class Inst
    {
        public static InstInfo None        = new InstInfo(0x00, new ExtendedInstructionInfo(InstructionEncoding.None)); //NA
        public static InstInfo Adc         = new InstInfo(0x10 | (2L << (int)InstOpCode_O_Shift), new ExtendedInstructionInfo(InstructionEncoding.X86Arith, new[] { InstOpGqdwbMem, InstOpGqdwbMem | InstOpImm }, InstFlagLock)); //X86/X64
        public static InstInfo Add         = new InstInfo(0x00, Adc.ExtendedInfo); //X86/X64
        public static InstInfo Addpd       = new InstInfo(0x58 | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtRm, new[] { InstOpXmm, InstOpXmmMem })); //SSE2
        public static InstInfo Addps       = new InstInfo(0x58 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE
        public static InstInfo Addsd       = new InstInfo(0x58 | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE2
        public static InstInfo Addss       = new InstInfo(0x58 | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE
        public static InstInfo Addsubpd    = new InstInfo(0xD0 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE3
        public static InstInfo Addsubps    = new InstInfo(0xD0 | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE3
        public static InstInfo Aesdec      = new InstInfo(0xDE | InstOpCode_PP_66 | InstOpCode_MM_0F38, Addpd.ExtendedInfo); //AESNI
        public static InstInfo Aesdeclast  = new InstInfo(0xDF | InstOpCode_PP_66 | InstOpCode_MM_0F38, Addpd.ExtendedInfo); //AESNI
        public static InstInfo Aesenc      = new InstInfo(0xDC | InstOpCode_PP_66 | InstOpCode_MM_0F38, Addpd.ExtendedInfo); //AESNI
        public static InstInfo Aesenclast  = new InstInfo(0xDD | InstOpCode_PP_66 | InstOpCode_MM_0F38, Addpd.ExtendedInfo); //AESNI
        public static InstInfo Aesimc      = new InstInfo(0xDB | InstOpCode_PP_66 | InstOpCode_MM_0F38, Addpd.ExtendedInfo); //AESNI
        public static InstInfo Aeskeygenassist = new InstInfo(0xDF | InstOpCode_PP_66 | InstOpCode_MM_0F3A, new ExtendedInstructionInfo(InstructionEncoding.ExtRmi, new[] { InstOpXmm, InstOpXmmMem, InstOpImm })); //AESNI
        public static InstInfo And         = new InstInfo(0x20 | (4L << (int)InstOpCode_O_Shift), Adc.ExtendedInfo); //X86/X64
        public static InstInfo Andn        = new InstInfo(0xF2 | InstOpCode_MM_0F38, new ExtendedInstructionInfo(InstructionEncoding.AvxRvm, new[] { InstOpGqd, InstOpGqd, InstOpGqdMem })); //BMI
        public static InstInfo Andnpd      = new InstInfo(0x55 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE2
        public static InstInfo Andnps      = new InstInfo(0x55 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE
        public static InstInfo Andpd       = new InstInfo(0x54 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE2
        public static InstInfo Andps       = new InstInfo(0x54 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE
        public static InstInfo Bextr       = new InstInfo(0xF7 | InstOpCode_MM_0F38, new ExtendedInstructionInfo(InstructionEncoding.AvxRmv, new[] { InstOpGqd, InstOpGqdMem, InstOpGqd })); //BMI
        public static InstInfo Blendpd     = new InstInfo(0x0D | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Aeskeygenassist.ExtendedInfo); //SSE4.1
        public static InstInfo Blendps     = new InstInfo(0x0C | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Aeskeygenassist.ExtendedInfo); //SSE4.1
        public static InstInfo Blendvpd    = new InstInfo(0x15 | InstOpCode_PP_66 | InstOpCode_MM_0F38, new ExtendedInstructionInfo(InstructionEncoding.ExtRm, new[] { InstOpXmm, InstOpXmmMem }, InstFlagNone | InstFlagSpecial)); //SSE4.1
        public static InstInfo Blendvps    = new InstInfo(0x14 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Blendvpd.ExtendedInfo); //SSE4.1
        public static InstInfo Blsi        = new InstInfo(0xF3 | InstOpCode_MM_0F38 | (3L << (int)InstOpCode_O_Shift), new ExtendedInstructionInfo(InstructionEncoding.AvxVm, new[] { InstOpGqd, InstOpGqdMem })); //BMI
        public static InstInfo Blsmsk      = new InstInfo(0xF3 | InstOpCode_MM_0F38 | (2L << (int)InstOpCode_O_Shift), Blsi.ExtendedInfo); //BMI
        public static InstInfo Blsr        = new InstInfo(0xF3 | InstOpCode_MM_0F38 | (1L << (int)InstOpCode_O_Shift), Blsi.ExtendedInfo); //BMI
        public static InstInfo Bsf         = new InstInfo(0xBC | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.X86RegRm, new[] { InstOpGqdw, InstOpGqdwMem })); //X86/X64
        public static InstInfo Bsr         = new InstInfo(0xBD | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64
        public static InstInfo Bswap       = new InstInfo(0xC8 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.X86BSwap, new[] { InstOpGqd })); //X86/X64 (i486+)
        public static InstInfo Bt          = new InstInfo(0xA3 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.X86BTest, new[] { InstOpGqdwMem, InstOpGqdw | InstOpImm }, InstFlagTest, 0, InstOpCode_MM_0F00 | (0xBA) | (4L << (int)InstOpCode_O_Shift) )); //X86/X64
        public static InstInfo Btc         = new InstInfo(0xBB | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.X86BTest, new[] { InstOpGqdwMem, InstOpGqdw | InstOpImm }, InstFlagLock, 0, InstOpCode_MM_0F00 | (0xBA) | (7L << (int)InstOpCode_O_Shift) )); //X86/X64
        public static InstInfo Btr         = new InstInfo(0xB3 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.X86BTest, new[] { InstOpGqdwMem, InstOpGqdw | InstOpImm }, InstFlagLock, 0, InstOpCode_MM_0F00 | (0xBA) | (6L << (int)InstOpCode_O_Shift) )); //X86/X64
        public static InstInfo Bts         = new InstInfo(0xAB | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.X86BTest, new[] { InstOpGqdwMem, InstOpGqdw | InstOpImm }, InstFlagLock, 0, InstOpCode_MM_0F00 | (0xBA) | (5L << (int)InstOpCode_O_Shift) )); //X86/X64
        public static InstInfo Bzhi        = new InstInfo(0xF5 | InstOpCode_MM_0F38, Bextr.ExtendedInfo); //BMI2
        public static InstInfo Call        = new InstInfo(0xFF | (2L << (int)InstOpCode_O_Shift), new ExtendedInstructionInfo(InstructionEncoding.X86Call, new[] { InstOpGqdMem | InstOpLImm }, InstFlagFlow, 0, (0xE8) )); //X86/X64
        public static InstInfo Cbw         = new InstInfo(0x98 | InstOpCode_PP_66, new ExtendedInstructionInfo(InstructionEncoding.X86Op, null, InstFlagNone | InstFlagSpecial)); //X86/X64
        public static InstInfo Cdq         = new InstInfo(0x99, Cbw.ExtendedInfo); //X86/X64
        public static InstInfo Cdqe        = new InstInfo(0x98 | InstTable_W_W, Cbw.ExtendedInfo); //X64 only
        public static InstInfo Clc         = new InstInfo(0xF8, new ExtendedInstructionInfo(InstructionEncoding.X86Op)); //X86/X64
        public static InstInfo Cld         = new InstInfo(0xFC, Clc.ExtendedInfo); //X86/X64
        public static InstInfo Clflush     = new InstInfo(0xAE | InstOpCode_MM_0F00 | (7L << (int)InstOpCode_O_Shift), new ExtendedInstructionInfo(InstructionEncoding.X86M, new[] { InstOpMem })); //SSE2
        public static InstInfo Cmc         = new InstInfo(0xF5, Clc.ExtendedInfo); //X86/X64
        public static InstInfo Cmova       = new InstInfo(0x47 | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovae      = new InstInfo(0x43 | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovb       = new InstInfo(0x42 | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovbe      = new InstInfo(0x46 | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovc       = new InstInfo(0x42 | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmove       = new InstInfo(0x44 | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovg       = new InstInfo(0x4F | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovge      = new InstInfo(0x4D | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovl       = new InstInfo(0x4C | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovle      = new InstInfo(0x4E | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovna      = new InstInfo(0x46 | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovnae     = new InstInfo(0x42 | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovnb      = new InstInfo(0x43 | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovnbe     = new InstInfo(0x47 | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovnc      = new InstInfo(0x43 | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovne      = new InstInfo(0x45 | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovng      = new InstInfo(0x4E | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovnge     = new InstInfo(0x4C | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovnl      = new InstInfo(0x4D | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovnle     = new InstInfo(0x4F | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovno      = new InstInfo(0x41 | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovnp      = new InstInfo(0x4B | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovns      = new InstInfo(0x49 | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovnz      = new InstInfo(0x45 | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovo       = new InstInfo(0x40 | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovp       = new InstInfo(0x4A | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovpe      = new InstInfo(0x4A | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovpo      = new InstInfo(0x4B | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovs       = new InstInfo(0x48 | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmovz       = new InstInfo(0x44 | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //X86/X64 (cmovcc) (i586+)
        public static InstInfo Cmp         = new InstInfo(0x38 | (7L << (int)InstOpCode_O_Shift), new ExtendedInstructionInfo(InstructionEncoding.X86Arith, new[] { InstOpGqdwbMem, InstOpGqdwbMem | InstOpImm }, InstFlagTest)); //X86/X64
        public static InstInfo Cmppd       = new InstInfo(0xC2 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Aeskeygenassist.ExtendedInfo); //SSE2
        public static InstInfo Cmpps       = new InstInfo(0xC2 | InstOpCode_MM_0F00, Aeskeygenassist.ExtendedInfo); //SSE
        public static InstInfo CmpsB       = new InstInfo(0xA6, Cbw.ExtendedInfo); //CMPS - X86/X64
        public static InstInfo CmpsD       = new InstInfo(0xA7, Cbw.ExtendedInfo); //CMPS - X86/X64
        public static InstInfo CmpsQ       = new InstInfo(0xA7 | InstTable_W_W, Cbw.ExtendedInfo); //CMPS - X64
        public static InstInfo CmpsW       = new InstInfo(0xA7, new ExtendedInstructionInfo(InstructionEncoding.X86Op_66H, null, InstFlagNone | InstFlagSpecial)); //CMPS - X86/X64
        public static InstInfo Cmpsd       = new InstInfo(0xC2 | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Aeskeygenassist.ExtendedInfo); //SSE2
        public static InstInfo Cmpss       = new InstInfo(0xC2 | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Aeskeygenassist.ExtendedInfo); //SSE
        public static InstInfo Cmpxchg     = new InstInfo(0xB0 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.X86RmReg, null, InstFlagLock | InstFlagSpecial)); //X86/X64 (i486+)
        public static InstInfo Cmpxchg16b  = new InstInfo(0xC7 | InstOpCode_MM_0F00 | (1L << (int)InstOpCode_O_Shift) | InstTable_W_W, new ExtendedInstructionInfo(InstructionEncoding.X86M, new[] { InstOpMem }, InstFlagNone | InstFlagSpecial)); //X64 only
        public static InstInfo Cmpxchg8b   = new InstInfo(0xC7 | InstOpCode_MM_0F00 | (1L << (int)InstOpCode_O_Shift), Cmpxchg16b.ExtendedInfo); //X86/X64 (i586+)
        public static InstInfo Comisd      = new InstInfo(0x2F | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtRm, new[] { InstOpXmm, InstOpXmmMem }, InstFlagTest)); //SSE2
        public static InstInfo Comiss      = new InstInfo(0x2F | InstOpCode_MM_0F00, Comisd.ExtendedInfo); //SSE
        public static InstInfo Cpuid       = new InstInfo(0xA2 | InstOpCode_MM_0F00, Cbw.ExtendedInfo); //X86/X64 (i486/i586+)
        public static InstInfo Cqo         = new InstInfo(0x99 | InstTable_W_W, Cbw.ExtendedInfo); //X64 only
        public static InstInfo Crc32       = new InstInfo(0xF0 | InstOpCode_PP_F2 | InstOpCode_MM_0F38, new ExtendedInstructionInfo(InstructionEncoding.ExtCrc, new[] { InstOpGqd, InstOpGqdwbMem })); //SSE4.2
        public static InstInfo Cvtdq2pd    = new InstInfo(0xE6 | InstOpCode_PP_F3 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtRm, new[] { InstOpXmm, InstOpXmmMem }, InstFlagMove, 16)); //SSE2
        public static InstInfo Cvtdq2ps    = new InstInfo(0x5B | InstOpCode_MM_0F00, Cvtdq2pd.ExtendedInfo); //SSE2
        public static InstInfo Cvtpd2dq    = new InstInfo(0xE6 | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Cvtdq2pd.ExtendedInfo); //SSE2
        public static InstInfo Cvtpd2pi    = new InstInfo(0x2D | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtRm, new[] { InstOpMm, InstOpXmmMem }, InstFlagMove, 8)); //SSE2
        public static InstInfo Cvtpd2ps    = new InstInfo(0x5A | InstOpCode_PP_66 | InstOpCode_MM_0F00, Cvtdq2pd.ExtendedInfo); //SSE2
        public static InstInfo Cvtpi2pd    = new InstInfo(0x2A | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtRm, new[] { InstOpXmm, InstOpMmMem }, InstFlagMove, 16)); //SSE2
        public static InstInfo Cvtpi2ps    = new InstInfo(0x2A | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtRm, new[] { InstOpXmm, InstOpMmMem }, InstFlagMove, 8)); //SSE
        public static InstInfo Cvtps2dq    = new InstInfo(0x5B | InstOpCode_PP_66 | InstOpCode_MM_0F00, Cvtdq2pd.ExtendedInfo); //SSE2
        public static InstInfo Cvtps2pd    = new InstInfo(0x5A | InstOpCode_MM_0F00, Cvtdq2pd.ExtendedInfo); //SSE2
        public static InstInfo Cvtps2pi    = new InstInfo(0x2D | InstOpCode_MM_0F00, Cvtpd2pi.ExtendedInfo); //SSE
        public static InstInfo Cvtsd2si    = new InstInfo(0x2D | InstOpCode_PP_F2 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtRm_Q, new[] { InstOpGqd, InstOpXmmMem }, InstFlagMove, 8)); //SSE2
        public static InstInfo Cvtsd2ss    = new InstInfo(0x5A | InstOpCode_PP_F2 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtRm, new[] { InstOpXmm, InstOpXmmMem }, InstFlagMove, 4)); //SSE2
        public static InstInfo Cvtsi2sd    = new InstInfo(0x2A | InstOpCode_PP_F2 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtRm_Q, new[] { InstOpXmm, InstOpGqdMem }, InstFlagMove, 8)); //SSE2
        public static InstInfo Cvtsi2ss    = new InstInfo(0x2A | InstOpCode_PP_F3 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtRm_Q, new[] { InstOpXmm, InstOpGqdMem }, InstFlagMove, 4)); //SSE
        public static InstInfo Cvtss2sd    = new InstInfo(0x5A | InstOpCode_PP_F3 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtRm, new[] { InstOpXmm, InstOpXmmMem }, InstFlagMove, 8)); //SSE2
        public static InstInfo Cvtss2si    = new InstInfo(0x2D | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Cvtsd2si.ExtendedInfo); //SSE
        public static InstInfo Cvttpd2dq   = new InstInfo(0xE6 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Cvtdq2pd.ExtendedInfo); //SSE2
        public static InstInfo Cvttpd2pi   = new InstInfo(0x2C | InstOpCode_PP_66 | InstOpCode_MM_0F00, Cvtpd2pi.ExtendedInfo); //SSE2
        public static InstInfo Cvttps2dq   = new InstInfo(0x5B | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Cvtdq2pd.ExtendedInfo); //SSE2
        public static InstInfo Cvttps2pi   = new InstInfo(0x2C | InstOpCode_MM_0F00, Cvtpd2pi.ExtendedInfo); //SSE
        public static InstInfo Cvttsd2si   = new InstInfo(0x2C | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Cvtsd2si.ExtendedInfo); //SSE2
        public static InstInfo Cvttss2si   = new InstInfo(0x2C | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Cvtsd2si.ExtendedInfo); //SSE
        public static InstInfo Cwd         = new InstInfo(0x99 | InstOpCode_PP_66, Cbw.ExtendedInfo); //X86/X64
        public static InstInfo Cwde        = new InstInfo(0x98, Cbw.ExtendedInfo); //X86/X64
        public static InstInfo Daa         = new InstInfo(0x27, Cbw.ExtendedInfo); //X86 only
        public static InstInfo Das         = new InstInfo(0x2F, Cbw.ExtendedInfo); //X86 only
        public static InstInfo Dec         = new InstInfo(0xFE | (1L << (int)InstOpCode_O_Shift), new ExtendedInstructionInfo(InstructionEncoding.X86IncDec, new[] { InstOpGqdwbMem }, InstFlagLock, 0, 0x48U )); //X86/X64
        public static InstInfo Div         = new InstInfo(0xF6 | (6L << (int)InstOpCode_O_Shift), new ExtendedInstructionInfo(InstructionEncoding.X86Rm_B, null, InstFlagNone | InstFlagSpecial)); //X86/X64
        public static InstInfo Divpd       = new InstInfo(0x5E | InstOpCode_PP_66 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE2
        public static InstInfo Divps       = new InstInfo(0x5E | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE
        public static InstInfo Divsd       = new InstInfo(0x5E | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE2
        public static InstInfo Divss       = new InstInfo(0x5E | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE
        public static InstInfo Dppd        = new InstInfo(0x41 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Aeskeygenassist.ExtendedInfo); //SSE4.1
        public static InstInfo Dpps        = new InstInfo(0x40 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Aeskeygenassist.ExtendedInfo); //SSE4.1
        public static InstInfo Emms        = new InstInfo(0x77 | InstOpCode_MM_0F00, Clc.ExtendedInfo); //MMX
        public static InstInfo Enter       = new InstInfo(0xC8, new ExtendedInstructionInfo(InstructionEncoding.X86Enter, null, InstFlagNone | InstFlagSpecial)); //X86/X64
        public static InstInfo Extractps   = new InstInfo(0x17 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, new ExtendedInstructionInfo(InstructionEncoding.ExtExtract, new[] { InstOpGqdMem, InstOpXmm }, InstFlagMove, 8)); //SSE4.1
        public static InstInfo Extrq       = new InstInfo(0x79 | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtExtrq, new[] { InstOpXmm, InstOpXmm | InstOpImm, InstOpNone | InstOpImm }, InstFlagNone, 0, InstOpCode_PP_66 | InstOpCode_MM_0F00 | 0x78U )); //SSE4a 
        public static InstInfo F2xm1       = new InstInfo(0xD9F0, new ExtendedInstructionInfo(InstructionEncoding.FpuOp, null, InstFlagFp)); //FPU
        public static InstInfo Fabs        = new InstInfo(0xD9E1, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Fadd        = new InstInfo(0xC0C0, new ExtendedInstructionInfo(InstructionEncoding.FpuArith, new[] { InstOpFpMem, InstOpFp }, InstFlagFp | InstFlagMem4_8)); //FPU
        public static InstInfo Faddp       = new InstInfo(0xDEC0, new ExtendedInstructionInfo(InstructionEncoding.FpuRDef, new[] { InstOpFp }, InstFlagFp)); //FPU
        public static InstInfo Fbld        = new InstInfo(0xDF | (4L << (int)InstOpCode_O_Shift), new ExtendedInstructionInfo(InstructionEncoding.X86M, new[] { InstOpMem }, InstFlagFp)); //FPU
        public static InstInfo Fbstp       = new InstInfo(0xDF | (6L << (int)InstOpCode_O_Shift), Fbld.ExtendedInfo); //FPU
        public static InstInfo Fchs        = new InstInfo(0xD9E0, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Fclex       = new InstInfo(0xDBE2 | InstOpCode_PP_9B, F2xm1.ExtendedInfo); //FPU 
        public static InstInfo Fcmovb      = new InstInfo(0xDAC0, new ExtendedInstructionInfo(InstructionEncoding.FpuR, new[] { InstOpFp }, InstFlagFp)); //FPU
        public static InstInfo Fcmovbe     = new InstInfo(0xDAD0, Fcmovb.ExtendedInfo); //FPU
        public static InstInfo Fcmove      = new InstInfo(0xDAC8, Fcmovb.ExtendedInfo); //FPU
        public static InstInfo Fcmovnb     = new InstInfo(0xDBC0, Fcmovb.ExtendedInfo); //FPU
        public static InstInfo Fcmovnbe    = new InstInfo(0xDBD0, Fcmovb.ExtendedInfo); //FPU
        public static InstInfo Fcmovne     = new InstInfo(0xDBC8, Fcmovb.ExtendedInfo); //FPU
        public static InstInfo Fcmovnu     = new InstInfo(0xDBD8, Fcmovb.ExtendedInfo); //FPU
        public static InstInfo Fcmovu      = new InstInfo(0xDAD8, Fcmovb.ExtendedInfo); //FPU
        public static InstInfo Fcom        = new InstInfo(0xD0D0 | (2L << (int)InstOpCode_O_Shift), new ExtendedInstructionInfo(InstructionEncoding.FpuCom, new[] { InstOpFp | InstOpMem, InstOpFp }, InstFlagFp)); //FPU| 
        public static InstInfo Fcomi       = new InstInfo(0xDBF0, Fcmovb.ExtendedInfo); //FPU
        public static InstInfo Fcomip      = new InstInfo(0xDFF0, Fcmovb.ExtendedInfo); //FPU
        public static InstInfo Fcomp       = new InstInfo(0xD8D8 | (3L << (int)InstOpCode_O_Shift), Fcom.ExtendedInfo); //FPU| 
        public static InstInfo Fcompp      = new InstInfo(0xDED9, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Fcos        = new InstInfo(0xD9FF, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Fdecstp     = new InstInfo(0xD9F6, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Fdiv        = new InstInfo(0xF0F8 | (6L << (int)InstOpCode_O_Shift), Fadd.ExtendedInfo); //FPU| 
        public static InstInfo Fdivp       = new InstInfo(0xDEF8, Faddp.ExtendedInfo); //FPU
        public static InstInfo Fdivr       = new InstInfo(0xF8F0 | (7L << (int)InstOpCode_O_Shift), Fadd.ExtendedInfo); //FPU| 
        public static InstInfo Fdivrp      = new InstInfo(0xDEF0, Faddp.ExtendedInfo); //FPU
        public static InstInfo Femms       = new InstInfo(0x0E | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.X86Op, null, InstFlagFp)); //3dNow!
        public static InstInfo Ffree       = new InstInfo(0xDDC0, Fcmovb.ExtendedInfo); //FPU
        public static InstInfo Fiadd       = new InstInfo(0xDA, new ExtendedInstructionInfo(InstructionEncoding.FpuM, new[] { InstOpMem }, InstFlagFp | InstFlagMem2_4)); //FPU
        public static InstInfo Ficom       = new InstInfo(0xDA | (2L << (int)InstOpCode_O_Shift), Fiadd.ExtendedInfo); //FPU
        public static InstInfo Ficomp      = new InstInfo(0xDA | (3L << (int)InstOpCode_O_Shift), Fiadd.ExtendedInfo); //FPU
        public static InstInfo Fidiv       = new InstInfo(0xDA | (6L << (int)InstOpCode_O_Shift), Fiadd.ExtendedInfo); //FPU
        public static InstInfo Fidivr      = new InstInfo(0xDA | (7L << (int)InstOpCode_O_Shift), Fiadd.ExtendedInfo); //FPU
        public static InstInfo Fild        = new InstInfo(0xDB | InstOpCode_MM_0000, new ExtendedInstructionInfo(InstructionEncoding.FpuM, new[] { InstOpMem }, InstFlagFp | InstFlagMem2_4_8, 0, (0xDF) | (5L << (int)InstOpCode_O_Shift) )); //FPU
        public static InstInfo Fimul       = new InstInfo(0xDA | (1L << (int)InstOpCode_O_Shift), Fiadd.ExtendedInfo); //FPU
        public static InstInfo Fincstp     = new InstInfo(0xD9F7, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Finit       = new InstInfo(0xDBE3 | InstOpCode_PP_9B, F2xm1.ExtendedInfo); //FPU 
        public static InstInfo Fist        = new InstInfo(0xDB | (2L << (int)InstOpCode_O_Shift), Fiadd.ExtendedInfo); //FPU
        public static InstInfo Fistp       = new InstInfo(0xDB | (3L << (int)InstOpCode_O_Shift), new ExtendedInstructionInfo(InstructionEncoding.FpuM, new[] { InstOpMem }, InstFlagFp | InstFlagMem2_4_8, 0, (0xDF) | (7L << (int)InstOpCode_O_Shift) )); //FPU
        public static InstInfo Fisttp      = new InstInfo(0xDB | (1L << (int)InstOpCode_O_Shift), new ExtendedInstructionInfo(InstructionEncoding.FpuM, new[] { InstOpMem }, InstFlagFp | InstFlagMem2_4_8, 0, (0xDD) | (1L << (int)InstOpCode_O_Shift) )); //SSE3
        public static InstInfo Fisub       = new InstInfo(0xDA | (4L << (int)InstOpCode_O_Shift), Fiadd.ExtendedInfo); //FPU
        public static InstInfo Fisubr      = new InstInfo(0xDA | (5L << (int)InstOpCode_O_Shift), Fiadd.ExtendedInfo); //FPU
        public static InstInfo Fld         = new InstInfo(0xD9 | InstOpCode_MM_0000, new ExtendedInstructionInfo(InstructionEncoding.FpuFldFst, new[] { InstOpMem }, InstFlagFp | InstFlagMem4_8_10, 0, (0xDB) | (5L << (int)InstOpCode_O_Shift) )); //FPU
        public static InstInfo Fld1        = new InstInfo(0xD9E8, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Fldcw       = new InstInfo(0xD9 | (5L << (int)InstOpCode_O_Shift), Fbld.ExtendedInfo); //FPU
        public static InstInfo Fldenv      = new InstInfo(0xD9 | (4L << (int)InstOpCode_O_Shift), Fbld.ExtendedInfo); //FPU
        public static InstInfo Fldl2e      = new InstInfo(0xD9EA, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Fldl2t      = new InstInfo(0xD9E9, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Fldlg2      = new InstInfo(0xD9EC, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Fldln2      = new InstInfo(0xD9ED, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Fldpi       = new InstInfo(0xD9EB, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Fldz        = new InstInfo(0xD9EE, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Fmul        = new InstInfo(0xC8C8 | (1L << (int)InstOpCode_O_Shift), Fadd.ExtendedInfo); //FPU| 
        public static InstInfo Fmulp       = new InstInfo(0xDEC8, Faddp.ExtendedInfo); //FPU
        public static InstInfo Fnclex      = new InstInfo(0xDBE2, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Fninit      = new InstInfo(0xDBE3, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Fnop        = new InstInfo(0xD9D0, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Fnsave      = new InstInfo(0xDD | (6L << (int)InstOpCode_O_Shift), Fbld.ExtendedInfo); //FPU
        public static InstInfo Fnstcw      = new InstInfo(0xD9 | (7L << (int)InstOpCode_O_Shift), Fbld.ExtendedInfo); //FPU
        public static InstInfo Fnstenv     = new InstInfo(0xD9 | (6L << (int)InstOpCode_O_Shift), Fbld.ExtendedInfo); //FPU
        public static InstInfo Fnstsw      = new InstInfo(0xDD | (7L << (int)InstOpCode_O_Shift), new ExtendedInstructionInfo(InstructionEncoding.FpuStsw, new[] { InstOpMem }, InstFlagFp, 0, (0xDFE0) )); //FPU
        public static InstInfo Fpatan      = new InstInfo(0xD9F3, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Fprem       = new InstInfo(0xD9F8, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Fprem1      = new InstInfo(0xD9F5, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Fptan       = new InstInfo(0xD9F2, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Frndint     = new InstInfo(0xD9FC, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Frstor      = new InstInfo(0xDD | (4L << (int)InstOpCode_O_Shift), Fbld.ExtendedInfo); //FPU
        public static InstInfo Fsave       = new InstInfo(0xDD | InstOpCode_PP_9B | (6L << (int)InstOpCode_O_Shift), Fbld.ExtendedInfo); //FPU
        public static InstInfo Fscale      = new InstInfo(0xD9FD, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Fsin        = new InstInfo(0xD9FE, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Fsincos     = new InstInfo(0xD9FB, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Fsqrt       = new InstInfo(0xD9FA, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Fst         = new InstInfo(0xD9 | (2L << (int)InstOpCode_O_Shift), new ExtendedInstructionInfo(InstructionEncoding.FpuFldFst, new[] { InstOpMem }, InstFlagFp | InstFlagMem4_8)); //FPU
        public static InstInfo Fstcw       = new InstInfo(0xD9 | InstOpCode_PP_9B | (7L << (int)InstOpCode_O_Shift), Fbld.ExtendedInfo); //FPU
        public static InstInfo Fstenv      = new InstInfo(0xD9 | InstOpCode_PP_9B | (6L << (int)InstOpCode_O_Shift), Fbld.ExtendedInfo); //FPU
        public static InstInfo Fstp        = new InstInfo(0xD9 | (3L << (int)InstOpCode_O_Shift), new ExtendedInstructionInfo(InstructionEncoding.FpuFldFst, new[] { InstOpMem }, InstFlagFp | InstFlagMem4_8_10, 0, (0xDB) | (7L << (int)InstOpCode_O_Shift) )); //FPU
        public static InstInfo Fstsw       = new InstInfo(0xDD | InstOpCode_PP_9B | (7L << (int)InstOpCode_O_Shift), new ExtendedInstructionInfo(InstructionEncoding.FpuStsw, new[] { InstOpMem }, InstFlagFp, 0, InstOpCode_PP_9B | (0xDFE0) )); //FPU
        public static InstInfo Fsub        = new InstInfo(0xE0E8 | (4L << (int)InstOpCode_O_Shift), Fadd.ExtendedInfo); //FPU| 
        public static InstInfo Fsubp       = new InstInfo(0xDEE8, Faddp.ExtendedInfo); //FPU
        public static InstInfo Fsubr       = new InstInfo(0xE8E0 | (5L << (int)InstOpCode_O_Shift), Fadd.ExtendedInfo); //FPU| 
        public static InstInfo Fsubrp      = new InstInfo(0xDEE0, Faddp.ExtendedInfo); //FPU
        public static InstInfo Ftst        = new InstInfo(0xD9E4, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Fucom       = new InstInfo(0xDDE0, Faddp.ExtendedInfo); //FPU
        public static InstInfo Fucomi      = new InstInfo(0xDBE8, Fcmovb.ExtendedInfo); //FPU
        public static InstInfo Fucomip     = new InstInfo(0xDFE8, Fcmovb.ExtendedInfo); //FPU
        public static InstInfo Fucomp      = new InstInfo(0xDDE8, Faddp.ExtendedInfo); //FPU
        public static InstInfo Fucompp     = new InstInfo(0xDAE9, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Fwait       = new InstInfo(0xDB, Femms.ExtendedInfo); //FPU
        public static InstInfo Fxam        = new InstInfo(0xD9E5, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Fxch        = new InstInfo(0xD9C8, Fcmovb.ExtendedInfo); //FPU
        public static InstInfo Fxrstor     = new InstInfo(0xAE | InstOpCode_MM_0F00 | (1L << (int)InstOpCode_O_Shift), Fbld.ExtendedInfo); //FPU
        public static InstInfo Fxsave      = new InstInfo(0xAE | InstOpCode_MM_0F00, Fbld.ExtendedInfo); //FPU
        public static InstInfo Fxtract     = new InstInfo(0xD9F4, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Fyl2x       = new InstInfo(0xD9F1, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Fyl2xp1     = new InstInfo(0xD9F9, F2xm1.ExtendedInfo); //FPU
        public static InstInfo Haddpd      = new InstInfo(0x7C | InstOpCode_PP_66 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE3
        public static InstInfo Haddps      = new InstInfo(0x7C | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE3
        public static InstInfo Hsubpd      = new InstInfo(0x7D | InstOpCode_PP_66 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE3
        public static InstInfo Hsubps      = new InstInfo(0x7D | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE3
        public static InstInfo Idiv        = new InstInfo(0xF6 | (7L << (int)InstOpCode_O_Shift), Div.ExtendedInfo); //X86/X64
        public static InstInfo Imul        = new InstInfo(0x00, new ExtendedInstructionInfo(InstructionEncoding.X86Imul, null, InstFlagNone | InstFlagSpecial)); //X86/X64
        public static InstInfo Inc         = new InstInfo(0xFE | InstOpCode_MM_0000, new ExtendedInstructionInfo(InstructionEncoding.X86IncDec, new[] { InstOpGqdwbMem }, InstFlagLock, 0, 0x40U )); //X86/X64 
        public static InstInfo Insertps    = new InstInfo(0x21 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Aeskeygenassist.ExtendedInfo); //SSE4.1
        public static InstInfo Insertq     = new InstInfo(0x79 | InstOpCode_PP_F2 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtInsertq, new[] { InstOpXmm, InstOpXmm, InstOpNone | InstOpImm, InstOpNone | InstOpImm }, InstFlagNone, 0, InstOpCode_PP_F2 | InstOpCode_MM_0F00 | 0x78U )); //SSE4a 
        public static InstInfo Int         = new InstInfo(0xCC, new ExtendedInstructionInfo(InstructionEncoding.X86Int)); //X86/X64
        public static InstInfo Ja          = new InstInfo(0x77, new ExtendedInstructionInfo(InstructionEncoding.X86Jcc, new[] { InstOpLabel }, InstFlagFlow)); //X86/X64 (jcc)
        public static InstInfo Jae         = new InstInfo(0x73, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Jb          = new InstInfo(0x72, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Jbe         = new InstInfo(0x76, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Jc          = new InstInfo(0x72, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Je          = new InstInfo(0x74, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Jg          = new InstInfo(0x7F, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Jge         = new InstInfo(0x7D, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Jl          = new InstInfo(0x7C, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Jle         = new InstInfo(0x7E, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Jna         = new InstInfo(0x76, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Jnae        = new InstInfo(0x72, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Jnb         = new InstInfo(0x73, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Jnbe        = new InstInfo(0x77, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Jnc         = new InstInfo(0x73, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Jne         = new InstInfo(0x75, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Jng         = new InstInfo(0x7E, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Jnge        = new InstInfo(0x7C, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Jnl         = new InstInfo(0x7D, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Jnle        = new InstInfo(0x7F, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Jno         = new InstInfo(0x71, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Jnp         = new InstInfo(0x7B, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Jns         = new InstInfo(0x79, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Jnz         = new InstInfo(0x75, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Jo          = new InstInfo(0x70, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Jp          = new InstInfo(0x7A, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Jpe         = new InstInfo(0x7A, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Jpo         = new InstInfo(0x7B, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Js          = new InstInfo(0x78, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Jz          = new InstInfo(0x74, Ja.ExtendedInfo); //X86/X64 (jcc)
        public static InstInfo Jecxz       = new InstInfo(0xE3, new ExtendedInstructionInfo(InstructionEncoding.X86Jecxz, new[] { InstOpGqdw, InstOpLabel }, InstFlagFlow | InstFlagSpecial)); //X86/X64 (jcxz/jecxz/jrcxz)
        public static InstInfo Jmp         = new InstInfo(0xFF | (4L << (int)InstOpCode_O_Shift), new ExtendedInstructionInfo(InstructionEncoding.X86Jmp, new[] { InstOpLabel | InstOpImm }, InstFlagFlow, 0, (0xE9) )); //X86/X64 (jmp)
        public static InstInfo Lahf        = new InstInfo(0x9F, Cbw.ExtendedInfo); //X86/X64 (CPUID NEEDED)
        public static InstInfo Lddqu       = new InstInfo(0xF0 | InstOpCode_PP_F2 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtRm, new[] { InstOpXmm, InstOpMem }, InstFlagMove, 16)); //SSE3
        public static InstInfo Ldmxcsr     = new InstInfo(0xAE | InstOpCode_MM_0F00 | (2L << (int)InstOpCode_O_Shift), Clflush.ExtendedInfo); //SSE
        public static InstInfo Lea         = new InstInfo(0x8D, new ExtendedInstructionInfo(InstructionEncoding.X86Lea, new[] { InstOpGqd, InstOpMem }, InstFlagMove)); //X86/X64
        public static InstInfo Leave       = new InstInfo(0xC9, Cbw.ExtendedInfo); //X86/X64
        public static InstInfo Lfence      = new InstInfo(0xAE | InstOpCode_MM_0F00 | (5L << (int)InstOpCode_O_Shift), new ExtendedInstructionInfo(InstructionEncoding.ExtFence)); //SSE2
        public static InstInfo LodsB       = new InstInfo(0xAC, new ExtendedInstructionInfo(InstructionEncoding.X86Op, null, InstFlagMove | InstFlagSpecial, 1)); //LODS - X86/X64
        public static InstInfo LodsD       = new InstInfo(0xAD, new ExtendedInstructionInfo(InstructionEncoding.X86Op, null, InstFlagMove | InstFlagSpecial, 4)); //LODS - X86/X64
        public static InstInfo LodsQ       = new InstInfo(0xAD | InstTable_W_W, new ExtendedInstructionInfo(InstructionEncoding.X86Op, null, InstFlagMove | InstFlagSpecial, 8)); //LODS - X86/X64
        public static InstInfo LodsW       = new InstInfo(0xAD, new ExtendedInstructionInfo(InstructionEncoding.X86Op_66H, null, InstFlagMove | InstFlagSpecial, 2)); //LODS - X86/X64
        public static InstInfo Lzcnt       = new InstInfo(0xBD | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //LZCNT
        public static InstInfo Maskmovdqu  = new InstInfo(0x57 | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtRm, new[] { InstOpXmm, InstOpXmm }, InstFlagNone | InstFlagSpecial)); //SSE2
        public static InstInfo Maskmovq    = new InstInfo(0xF7 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtRm, new[] { InstOpMm, InstOpMm }, InstFlagNone | InstFlagSpecial)); //MMX-Ext
        public static InstInfo Maxpd       = new InstInfo(0x5F | InstOpCode_PP_66 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE2
        public static InstInfo Maxps       = new InstInfo(0x5F | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE
        public static InstInfo Maxsd       = new InstInfo(0x5F | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE2
        public static InstInfo Maxss       = new InstInfo(0x5F | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE
        public static InstInfo Mfence      = new InstInfo(0xAE | InstOpCode_MM_0F00 | (6L << (int)InstOpCode_O_Shift), Lfence.ExtendedInfo); //SSE2
        public static InstInfo Minpd       = new InstInfo(0x5D | InstOpCode_PP_66 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE2
        public static InstInfo Minps       = new InstInfo(0x5D | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE
        public static InstInfo Minsd       = new InstInfo(0x5D | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE2
        public static InstInfo Minss       = new InstInfo(0x5D | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE
        public static InstInfo Monitor     = new InstInfo(0xC8 | InstOpCode_MM_0F01, Cbw.ExtendedInfo); //SSE3
        public static InstInfo Mov         = new InstInfo(0x00, new ExtendedInstructionInfo(InstructionEncoding.X86Mov, new[] { InstOpGqdwbMem, InstOpGqdwbMem | InstOpImm }, InstFlagMove)); //X86/X64
        public static InstInfo MovPtr      = new InstInfo(0xA0 | InstOpCode_MM_0000, new ExtendedInstructionInfo(InstructionEncoding.X86MovPtr, new[] { InstOpGqdwb, InstOpImm }, InstFlagMove | InstFlagSpecial, 0, (0xA2) )); //X86/X64 
        public static InstInfo Movapd      = new InstInfo(0x28 | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtMov, new[] { InstOpXmmMem, InstOpXmmMem }, InstFlagMove, 16, InstOpCode_PP_66 | InstOpCode_MM_0F00 | 0x29U )); //SSE2 
        public static InstInfo Movaps      = new InstInfo(0x28 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtMov, new[] { InstOpXmmMem, InstOpXmmMem }, InstFlagMove, 16, InstOpCode_MM_0F00 | 0x29U )); //SSE 
        public static InstInfo Movbe       = new InstInfo(0xF0 | InstOpCode_MM_0F38, new ExtendedInstructionInfo(InstructionEncoding.ExtMovBe, new[] { InstOpGqdwMem, InstOpGqdwMem }, InstFlagMove, 0, InstOpCode_MM_0F38 | (0xF1) )); //SSE3 - Intel-Atom 
        public static InstInfo Movd        = new InstInfo(0x6E | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtMovD, new[] { InstOpGd | InstOpMmXmmMem, InstOpGd | InstOpMmXmmMem }, InstFlagMove, 16, InstOpCode_MM_0F00 | (0x7E) )); //MMX/SSE2 
        public static InstInfo Movddup     = new InstInfo(0x12 | InstOpCode_PP_F2 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtMov, new[] { InstOpXmm, InstOpXmmMem }, InstFlagMove, 16)); //SSE3
        public static InstInfo Movdq2q     = new InstInfo(0xD6 | InstOpCode_PP_F2 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtMov, new[] { InstOpMm, InstOpXmm }, InstFlagMove, 8)); //SSE2
        public static InstInfo Movdqa      = new InstInfo(0x6F | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtMov, new[] { InstOpXmmMem, InstOpXmmMem }, InstFlagMove, 16, InstOpCode_PP_66 | InstOpCode_MM_0F00 | (0x7F) )); //SSE2 
        public static InstInfo Movdqu      = new InstInfo(0x6F | InstOpCode_PP_F3 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtMov, new[] { InstOpXmmMem, InstOpXmmMem }, InstFlagMove, 16, InstOpCode_PP_F3 | InstOpCode_MM_0F00 | (0x7F) )); //SSE2 
        public static InstInfo Movhlps     = new InstInfo(0x12 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtMov, new[] { InstOpXmm, InstOpXmm }, InstFlagMove, 8)); //SSE
        public static InstInfo Movhpd      = new InstInfo(0x16 | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtMov, new[] { InstOpXmmMem, InstOpXmmMem }, InstFlagNone, 8, InstOpCode_PP_66 | InstOpCode_MM_0F00 | 0x17U )); //SSE2 
        public static InstInfo Movhps      = new InstInfo(0x16 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtMov, new[] { InstOpXmmMem, InstOpXmmMem }, InstFlagNone, 8, InstOpCode_MM_0F00 | 0x17U )); //SSE 
        public static InstInfo Movlhps     = new InstInfo(0x16 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtMov, new[] { InstOpXmm, InstOpXmm }, InstFlagNone, 8)); //SSE
        public static InstInfo Movlpd      = new InstInfo(0x12 | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtMov, new[] { InstOpXmmMem, InstOpXmmMem }, InstFlagMove, 8, InstOpCode_PP_66 | InstOpCode_MM_0F00 | 0x13U )); //SSE2 
        public static InstInfo Movlps      = new InstInfo(0x12 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtMov, new[] { InstOpXmmMem, InstOpXmmMem }, InstFlagMove, 8, InstOpCode_MM_0F00 | 0x13U )); //SSE 
        public static InstInfo Movmskpd    = new InstInfo(0x50 | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtMovNoRexW, new[] { InstOpGqd, InstOpXmm }, InstFlagMove, 8)); //SSE2
        public static InstInfo Movmskps    = new InstInfo(0x50 | InstOpCode_MM_0F00, Movmskpd.ExtendedInfo); //SSE2
        public static InstInfo Movntdq     = new InstInfo(0x00, new ExtendedInstructionInfo(InstructionEncoding.ExtMov, new[] { InstOpMem, InstOpXmm }, InstFlagMove, 16, InstOpCode_PP_66 | InstOpCode_MM_0F00 | (0xE7))); //SSE2
        public static InstInfo Movntdqa    = new InstInfo(0x2A | InstOpCode_PP_66 | InstOpCode_MM_0F38, new ExtendedInstructionInfo(InstructionEncoding.ExtMov, new[] { InstOpXmm, InstOpMem }, InstFlagMove, 16)); //SSE4.1
        public static InstInfo Movnti      = new InstInfo(0x00, new ExtendedInstructionInfo(InstructionEncoding.ExtMov, new[] { InstOpMem, InstOpGqd }, InstFlagMove, 8, InstOpCode_MM_0F00 | (0xC3))); //SSE2
        public static InstInfo Movntpd     = new InstInfo(0x00, new ExtendedInstructionInfo(InstructionEncoding.ExtMov, new[] { InstOpMem, InstOpXmm }, InstFlagMove, 16, InstOpCode_PP_66 | InstOpCode_MM_0F00 | (0x2B))); //SSE2
        public static InstInfo Movntps     = new InstInfo(0x00, new ExtendedInstructionInfo(InstructionEncoding.ExtMov, new[] { InstOpMem, InstOpXmm }, InstFlagMove, 16, InstOpCode_MM_0F00 | (0x2B))); //SSE
        public static InstInfo Movntq      = new InstInfo(0x00, new ExtendedInstructionInfo(InstructionEncoding.ExtMov, new[] { InstOpMem, InstOpMm }, InstFlagMove, 8, InstOpCode_MM_0F00 | (0xE7))); //MMX-Ext
        public static InstInfo Movntsd     = new InstInfo(0x00, new ExtendedInstructionInfo(InstructionEncoding.ExtMov, new[] { InstOpMem, InstOpXmm }, InstFlagMove, 8, InstOpCode_PP_F2 | InstOpCode_MM_0F00 | (0x2B))); //SSE4a
        public static InstInfo Movntss     = new InstInfo(0x00, new ExtendedInstructionInfo(InstructionEncoding.ExtMov, new[] { InstOpMem, InstOpXmm }, InstFlagMove, 4, InstOpCode_PP_F3 | InstOpCode_MM_0F00 | (0x2B))); //SSE4a
        public static InstInfo Movq        = new InstInfo(0x6E | InstOpCode_MM_0F00 | InstTable_W_W, new ExtendedInstructionInfo(InstructionEncoding.ExtMovQ, new[] { InstOpGq | InstOpMmXmmMem, InstOpGq | InstOpMmXmmMem }, InstFlagMove, 16, InstOpCode_MM_0F00 | (0x7E) | InstTable_W_W)); //MMX/SSE/SSE2
        public static InstInfo Movq2dq     = new InstInfo(0xD6 | InstOpCode_PP_F3 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtRm, new[] { InstOpXmm, InstOpMm }, InstFlagMove, 16)); //SSE2
        public static InstInfo MovsB       = new InstInfo(0xA4, Cbw.ExtendedInfo); //MOVS - X86/X64
        public static InstInfo MovsD       = new InstInfo(0xA5, new ExtendedInstructionInfo(InstructionEncoding.X86Op, null, InstFlagMove | InstFlagSpecial)); //MOVS - X86/X64
        public static InstInfo MovsQ       = new InstInfo(0xA5 | InstTable_W_W, Cbw.ExtendedInfo); //MOVS - X64
        public static InstInfo MovsW       = new InstInfo(0xA5, CmpsW.ExtendedInfo); //MOVS - X86/X64
        public static InstInfo Movsd       = new InstInfo(0x10 | InstOpCode_PP_F2 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtMov, new[] { InstOpXmmMem, InstOpXmmMem }, InstFlagMove | InstFlagZ, 8, InstOpCode_PP_F2 | InstOpCode_MM_0F00 | 0x11U )); //SSE2 
        public static InstInfo Movshdup    = new InstInfo(0x16 | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Cvtdq2pd.ExtendedInfo); //SSE3
        public static InstInfo Movsldup    = new InstInfo(0x12 | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Cvtdq2pd.ExtendedInfo); //SSE3
        public static InstInfo Movss       = new InstInfo(0x10 | InstOpCode_PP_F3 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtMov, new[] { InstOpXmmMem, InstOpXmmMem }, InstFlagMove | InstFlagZ, 4, InstOpCode_PP_F3 | InstOpCode_MM_0F00 | 0x11U )); //SSE 
        public static InstInfo Movsx       = new InstInfo(0xBE | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.X86MovSxZx, new[] { InstOpGqdw, InstOpGwbMem }, InstFlagMove)); //X86/X64
        public static InstInfo Movsxd      = new InstInfo(0x63, new ExtendedInstructionInfo(InstructionEncoding.X86MovSxd, new[] { InstOpGq, InstOpGdMem }, InstFlagMove)); //X86/X64
        public static InstInfo Movupd      = new InstInfo(0x10 | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtMov, new[] { InstOpXmmMem, InstOpXmmMem }, InstFlagMove, 16, InstOpCode_PP_66 | InstOpCode_MM_0F00 | 0x11U )); //SSE2 
        public static InstInfo Movups      = new InstInfo(0x10 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtMov, new[] { InstOpXmmMem, InstOpXmmMem }, InstFlagMove, 16, InstOpCode_MM_0F00 | 0x11U )); //SSE 
        public static InstInfo Movzx       = new InstInfo(0xB6 | InstOpCode_MM_0F00, Movsx.ExtendedInfo); //X86/X64
        public static InstInfo Mpsadbw     = new InstInfo(0x42 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Aeskeygenassist.ExtendedInfo); //SSE4.1
        public static InstInfo Mul         = new InstInfo(0xF6 | (4L << (int)InstOpCode_O_Shift), Div.ExtendedInfo); //X86/X64
        public static InstInfo Mulpd       = new InstInfo(0x59 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE2
        public static InstInfo Mulps       = new InstInfo(0x59 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE
        public static InstInfo Mulsd       = new InstInfo(0x59 | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE2
        public static InstInfo Mulss       = new InstInfo(0x59 | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE
        public static InstInfo Mulx        = new InstInfo(0xF6 | InstOpCode_PP_F2 | InstOpCode_MM_0F38, Andn.ExtendedInfo); //BMI2
        public static InstInfo Mwait       = new InstInfo(0xC9 | InstOpCode_MM_0F01, Cbw.ExtendedInfo); //SSE3
        public static InstInfo Neg         = new InstInfo(0xF6 | (3L << (int)InstOpCode_O_Shift), new ExtendedInstructionInfo(InstructionEncoding.X86Rm_B, new[] { InstOpGqdwbMem }, InstFlagLock)); //X86/X64
        public static InstInfo Nop         = new InstInfo(0x90, Clc.ExtendedInfo); //X86/X64
        public static InstInfo Not         = new InstInfo(0xF6 | (2L << (int)InstOpCode_O_Shift), Neg.ExtendedInfo); //X86/X64
        public static InstInfo Or          = new InstInfo(0x08 | (1L << (int)InstOpCode_O_Shift), Adc.ExtendedInfo); //X86/X64
        public static InstInfo Orpd        = new InstInfo(0x56 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE2
        public static InstInfo Orps        = new InstInfo(0x56 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE
        public static InstInfo Pabsb       = new InstInfo(0x1C | InstOpCode_MM_0F38, new ExtendedInstructionInfo(InstructionEncoding.ExtRm_P, new[] { InstOpMmXmm, InstOpMmXmmMem })); //SSSE3
        public static InstInfo Pabsd       = new InstInfo(0x1E | InstOpCode_MM_0F38, Pabsb.ExtendedInfo); //SSSE3
        public static InstInfo Pabsw       = new InstInfo(0x1D | InstOpCode_MM_0F38, Pabsb.ExtendedInfo); //SSSE3
        public static InstInfo Packssdw    = new InstInfo(0x6B | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Packsswb    = new InstInfo(0x63 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Packusdw    = new InstInfo(0x2B | InstOpCode_PP_66 | InstOpCode_MM_0F38, Addpd.ExtendedInfo); //SSE4.1
        public static InstInfo Packuswb    = new InstInfo(0x67 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Paddb       = new InstInfo(0xFC | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Paddd       = new InstInfo(0xFE | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Paddq       = new InstInfo(0xD4 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //SSE2
        public static InstInfo Paddsb      = new InstInfo(0xEC | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Paddsw      = new InstInfo(0xED | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Paddusb     = new InstInfo(0xDC | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Paddusw     = new InstInfo(0xDD | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Paddw       = new InstInfo(0xFD | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Palignr     = new InstInfo(0x0F | InstOpCode_MM_0F3A, new ExtendedInstructionInfo(InstructionEncoding.ExtRmi_P, new[] { InstOpMmXmm, InstOpMmXmmMem, InstOpImm })); //SSSE3
        public static InstInfo Pand        = new InstInfo(0xDB | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Pandn       = new InstInfo(0xDF | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Pause       = new InstInfo(0x90 | InstOpCode_PP_F3, Clc.ExtendedInfo); //SSE2.
        public static InstInfo Pavgb       = new InstInfo(0xE0 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX-Ext
        public static InstInfo Pavgw       = new InstInfo(0xE3 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX-Ext
        public static InstInfo Pblendvb    = new InstInfo(0x10 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Blendvpd.ExtendedInfo); //SSE4.1
        public static InstInfo Pblendw     = new InstInfo(0x0E | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Aeskeygenassist.ExtendedInfo); //SSE4.1
        public static InstInfo Pclmulqdq   = new InstInfo(0x44 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Aeskeygenassist.ExtendedInfo); //PCLMULQDQ
        public static InstInfo Pcmpeqb     = new InstInfo(0x74 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Pcmpeqd     = new InstInfo(0x76 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Pcmpeqq     = new InstInfo(0x29 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Addpd.ExtendedInfo); //SSE4.1
        public static InstInfo Pcmpeqw     = new InstInfo(0x75 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Pcmpestri   = new InstInfo(0x61 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Aeskeygenassist.ExtendedInfo); //SSE4.2
        public static InstInfo Pcmpestrm   = new InstInfo(0x60 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Aeskeygenassist.ExtendedInfo); //SSE4.2
        public static InstInfo Pcmpgtb     = new InstInfo(0x64 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Pcmpgtd     = new InstInfo(0x66 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Pcmpgtq     = new InstInfo(0x37 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Addpd.ExtendedInfo); //SSE4.2
        public static InstInfo Pcmpgtw     = new InstInfo(0x65 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Pcmpistri   = new InstInfo(0x63 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Aeskeygenassist.ExtendedInfo); //SSE4.2
        public static InstInfo Pcmpistrm   = new InstInfo(0x62 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Aeskeygenassist.ExtendedInfo); //SSE4.2
        public static InstInfo Pdep        = new InstInfo(0xF5 | InstOpCode_PP_F2 | InstOpCode_MM_0F38, Andn.ExtendedInfo); //BMI2
        public static InstInfo Pext        = new InstInfo(0xF5 | InstOpCode_PP_F3 | InstOpCode_MM_0F38, Andn.ExtendedInfo); //BMI2
        public static InstInfo Pextrb      = new InstInfo(0x14 | InstOpCode_MM_0F3A, new ExtendedInstructionInfo(InstructionEncoding.ExtExtract, new[] { InstOpGd | InstOpGb | InstOpMem, InstOpXmm }, InstFlagMove, 8)); //SSE4.1
        public static InstInfo Pextrd      = new InstInfo(0x16 | InstOpCode_MM_0F3A, new ExtendedInstructionInfo(InstructionEncoding.ExtExtract, new[] { InstOpGdMem, InstOpXmm }, InstFlagMove, 8)); //SSE4.1
        public static InstInfo Pextrq      = new InstInfo(0x16 | InstOpCode_MM_0F3A | InstTable_W_W, Extractps.ExtendedInfo); //SSE4.1
        public static InstInfo Pextrw      = new InstInfo(0xC5 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtExtrW, new[] { InstOpGdMem, InstOpMmXmm }, InstFlagMove, 8, InstOpCode_MM_0F3A | 0x15U )); //MMX-Ext/SSE2 
        public static InstInfo Pf2id       = new InstInfo(0x1D | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.Amd3dNow, new[] { InstOpMm, InstOpMmMem })); //3dNow!
        public static InstInfo Pf2iw       = new InstInfo(0x1C | InstOpCode_MM_0F00, Pf2id.ExtendedInfo); //Enhanced 3dNow!
        public static InstInfo Pfacc       = new InstInfo(0xAE | InstOpCode_MM_0F00, Pf2id.ExtendedInfo); //3dNow!
        public static InstInfo Pfadd       = new InstInfo(0x9E | InstOpCode_MM_0F00, Pf2id.ExtendedInfo); //3dNow!
        public static InstInfo Pfcmpeq     = new InstInfo(0xB0 | InstOpCode_MM_0F00, Pf2id.ExtendedInfo); //3dNow!
        public static InstInfo Pfcmpge     = new InstInfo(0x90 | InstOpCode_MM_0F00, Pf2id.ExtendedInfo); //3dNow!
        public static InstInfo Pfcmpgt     = new InstInfo(0xA0 | InstOpCode_MM_0F00, Pf2id.ExtendedInfo); //3dNow!
        public static InstInfo Pfmax       = new InstInfo(0xA4 | InstOpCode_MM_0F00, Pf2id.ExtendedInfo); //3dNow!
        public static InstInfo Pfmin       = new InstInfo(0x94 | InstOpCode_MM_0F00, Pf2id.ExtendedInfo); //3dNow!
        public static InstInfo Pfmul       = new InstInfo(0xB4 | InstOpCode_MM_0F00, Pf2id.ExtendedInfo); //3dNow!
        public static InstInfo Pfnacc      = new InstInfo(0x8A | InstOpCode_MM_0F00, Pf2id.ExtendedInfo); //Enhanced 3dNow!
        public static InstInfo Pfpnacc     = new InstInfo(0x8E | InstOpCode_MM_0F00, Pf2id.ExtendedInfo); //Enhanced 3dNow!
        public static InstInfo Pfrcp       = new InstInfo(0x96 | InstOpCode_MM_0F00, Pf2id.ExtendedInfo); //3dNow!
        public static InstInfo Pfrcpit1    = new InstInfo(0xA6 | InstOpCode_MM_0F00, Pf2id.ExtendedInfo); //3dNow!
        public static InstInfo Pfrcpit2    = new InstInfo(0xB6 | InstOpCode_MM_0F00, Pf2id.ExtendedInfo); //3dNow!
        public static InstInfo Pfrsqit1    = new InstInfo(0xA7 | InstOpCode_MM_0F00, Pf2id.ExtendedInfo); //3dNow!
        public static InstInfo Pfrsqrt     = new InstInfo(0x97 | InstOpCode_MM_0F00, Pf2id.ExtendedInfo); //3dNow!
        public static InstInfo Pfsub       = new InstInfo(0x9A | InstOpCode_MM_0F00, Pf2id.ExtendedInfo); //3dNow!
        public static InstInfo Pfsubr      = new InstInfo(0xAA | InstOpCode_MM_0F00, Pf2id.ExtendedInfo); //3dNow!
        public static InstInfo Phaddd      = new InstInfo(0x02 | InstOpCode_MM_0F38, Pabsb.ExtendedInfo); //SSSE3
        public static InstInfo Phaddsw     = new InstInfo(0x03 | InstOpCode_MM_0F38, Pabsb.ExtendedInfo); //SSSE3
        public static InstInfo Phaddw      = new InstInfo(0x01 | InstOpCode_MM_0F38, Pabsb.ExtendedInfo); //SSSE3
        public static InstInfo Phminposuw  = new InstInfo(0x41 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Addpd.ExtendedInfo); //SSE4.1
        public static InstInfo Phsubd      = new InstInfo(0x06 | InstOpCode_MM_0F38, Pabsb.ExtendedInfo); //SSSE3
        public static InstInfo Phsubsw     = new InstInfo(0x07 | InstOpCode_MM_0F38, Pabsb.ExtendedInfo); //SSSE3
        public static InstInfo Phsubw      = new InstInfo(0x05 | InstOpCode_MM_0F38, Pabsb.ExtendedInfo); //SSSE3
        public static InstInfo Pi2fd       = new InstInfo(0x0D | InstOpCode_MM_0F00, Pf2id.ExtendedInfo); //3dNow!
        public static InstInfo Pi2fw       = new InstInfo(0x0C | InstOpCode_MM_0F00, Pf2id.ExtendedInfo); //Enhanced 3dNow!
        public static InstInfo Pinsrb      = new InstInfo(0x20 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, new ExtendedInstructionInfo(InstructionEncoding.ExtRmi, new[] { InstOpXmm, InstOpGdMem, InstOpImm })); //SSE4.1
        public static InstInfo Pinsrd      = new InstInfo(0x22 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Pinsrb.ExtendedInfo); //SSE4.1
        public static InstInfo Pinsrq      = new InstInfo(0x22 | InstOpCode_PP_66 | InstOpCode_MM_0F3A | InstTable_W_W, new ExtendedInstructionInfo(InstructionEncoding.ExtRmi, new[] { InstOpXmm, InstOpGqMem, InstOpImm })); //SSE4.1
        public static InstInfo Pinsrw      = new InstInfo(0xC4 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtRmi_P, new[] { InstOpMmXmm, InstOpGdMem, InstOpImm })); //MMX-Ext
        public static InstInfo Pmaddubsw   = new InstInfo(0x04 | InstOpCode_MM_0F38, Pabsb.ExtendedInfo); //SSSE3
        public static InstInfo Pmaddwd     = new InstInfo(0xF5 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Pmaxsb      = new InstInfo(0x3C | InstOpCode_PP_66 | InstOpCode_MM_0F38, Addpd.ExtendedInfo); //SSE4.1
        public static InstInfo Pmaxsd      = new InstInfo(0x3D | InstOpCode_PP_66 | InstOpCode_MM_0F38, Addpd.ExtendedInfo); //SSE4.1
        public static InstInfo Pmaxsw      = new InstInfo(0xEE | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX-Ext
        public static InstInfo Pmaxub      = new InstInfo(0xDE | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX-Ext
        public static InstInfo Pmaxud      = new InstInfo(0x3F | InstOpCode_PP_66 | InstOpCode_MM_0F38, Addpd.ExtendedInfo); //SSE4.1
        public static InstInfo Pmaxuw      = new InstInfo(0x3E | InstOpCode_PP_66 | InstOpCode_MM_0F38, Addpd.ExtendedInfo); //SSE4.1
        public static InstInfo Pminsb      = new InstInfo(0x38 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Addpd.ExtendedInfo); //SSE4.1
        public static InstInfo Pminsd      = new InstInfo(0x39 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Addpd.ExtendedInfo); //SSE4.1
        public static InstInfo Pminsw      = new InstInfo(0xEA | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX-Ext
        public static InstInfo Pminub      = new InstInfo(0xDA | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX-Ext
        public static InstInfo Pminud      = new InstInfo(0x3B | InstOpCode_PP_66 | InstOpCode_MM_0F38, Addpd.ExtendedInfo); //SSE4.1
        public static InstInfo Pminuw      = new InstInfo(0x3A | InstOpCode_PP_66 | InstOpCode_MM_0F38, Addpd.ExtendedInfo); //SSE4.1
        public static InstInfo Pmovmskb    = new InstInfo(0xD7 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtRm_PQ, new[] { InstOpGqd, InstOpMmXmm }, InstFlagMove, 8)); //MMX-Ext
        public static InstInfo Pmovsxbd    = new InstInfo(0x21 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Cvtdq2pd.ExtendedInfo); //SSE4.1
        public static InstInfo Pmovsxbq    = new InstInfo(0x22 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Cvtdq2pd.ExtendedInfo); //SSE4.1
        public static InstInfo Pmovsxbw    = new InstInfo(0x20 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Cvtdq2pd.ExtendedInfo); //SSE4.1
        public static InstInfo Pmovsxdq    = new InstInfo(0x25 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Cvtdq2pd.ExtendedInfo); //SSE4.1
        public static InstInfo Pmovsxwd    = new InstInfo(0x23 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Cvtdq2pd.ExtendedInfo); //SSE4.1
        public static InstInfo Pmovsxwq    = new InstInfo(0x24 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Cvtdq2pd.ExtendedInfo); //SSE4.1
        public static InstInfo Pmovzxbd    = new InstInfo(0x31 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Cvtdq2pd.ExtendedInfo); //SSE4.1
        public static InstInfo Pmovzxbq    = new InstInfo(0x32 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Cvtdq2pd.ExtendedInfo); //SSE4.1
        public static InstInfo Pmovzxbw    = new InstInfo(0x30 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Cvtdq2pd.ExtendedInfo); //SSE4.1
        public static InstInfo Pmovzxdq    = new InstInfo(0x35 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Cvtdq2pd.ExtendedInfo); //SSE4.1
        public static InstInfo Pmovzxwd    = new InstInfo(0x33 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Cvtdq2pd.ExtendedInfo); //SSE4.1
        public static InstInfo Pmovzxwq    = new InstInfo(0x34 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Cvtdq2pd.ExtendedInfo); //SSE4.1
        public static InstInfo Pmuldq      = new InstInfo(0x28 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Addpd.ExtendedInfo); //SSE4.1
        public static InstInfo Pmulhrsw    = new InstInfo(0x0B | InstOpCode_MM_0F38, Pabsb.ExtendedInfo); //SSSE3
        public static InstInfo Pmulhuw     = new InstInfo(0xE4 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX-Ext
        public static InstInfo Pmulhw      = new InstInfo(0xE5 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Pmulld      = new InstInfo(0x40 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Addpd.ExtendedInfo); //SSE4.1
        public static InstInfo Pmullw      = new InstInfo(0xD5 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Pmuludq     = new InstInfo(0xF4 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //SSE2
        public static InstInfo Pop         = new InstInfo(0x8F | InstOpCode_MM_0000, new ExtendedInstructionInfo(InstructionEncoding.X86Pop, null, InstFlagNone | InstFlagSpecial, 0, 0x58U )); //X86/X64 
        public static InstInfo Popa        = new InstInfo(0x61, Cbw.ExtendedInfo); //X86 only
        public static InstInfo Popcnt      = new InstInfo(0xB8 | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Bsf.ExtendedInfo); //SSE4.2
        public static InstInfo Popf        = new InstInfo(0x9D, Cbw.ExtendedInfo); //X86/X64
        public static InstInfo Por         = new InstInfo(0xEB | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Prefetch    = new InstInfo(0x18 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtPrefetch, new[] { InstOpMem, InstOpImm })); //MMX-Ext/SSE
        public static InstInfo Prefetch3dNow = new InstInfo(0x0D | InstOpCode_MM_0F00, Clflush.ExtendedInfo); //3dNow!
        public static InstInfo Prefetchw3dNow = new InstInfo(0x0D | InstOpCode_MM_0F00 | (1L << (int)InstOpCode_O_Shift), Clflush.ExtendedInfo); //3dNow!
        public static InstInfo Psadbw      = new InstInfo(0xF6 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX-Ext
        public static InstInfo Pshufb      = new InstInfo(0x00 | InstOpCode_MM_0F38, Pabsb.ExtendedInfo); //SSSE3
        public static InstInfo Pshufd      = new InstInfo(0x70 | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtRmi, new[] { InstOpXmm, InstOpXmmMem, InstOpImm }, InstFlagMove, 16)); //SSE2
        public static InstInfo Pshufhw     = new InstInfo(0x70 | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Pshufd.ExtendedInfo); //SSE2
        public static InstInfo Pshuflw     = new InstInfo(0x70 | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Pshufd.ExtendedInfo); //SSE2
        public static InstInfo Pshufw      = new InstInfo(0x70 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtRmi_P, new[] { InstOpMm, InstOpMmMem, InstOpImm }, InstFlagMove, 8)); //MMX-Ext
        public static InstInfo Psignb      = new InstInfo(0x08 | InstOpCode_MM_0F38, Pabsb.ExtendedInfo); //SSSE3
        public static InstInfo Psignd      = new InstInfo(0x0A | InstOpCode_MM_0F38, Pabsb.ExtendedInfo); //SSSE3
        public static InstInfo Psignw      = new InstInfo(0x09 | InstOpCode_MM_0F38, Pabsb.ExtendedInfo); //SSSE3
        public static InstInfo Pslld       = new InstInfo(0xF2 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtRmRi_P, new[] { InstOpMmXmm, InstOpMmXmmMem | InstOpImm }, InstFlagNone, 0, InstOpCode_MM_0F00 | 0x72U | (6L << (int)InstOpCode_O_Shift) )); //MMX/SSE2
        public static InstInfo Pslldq      = new InstInfo(0x00, new ExtendedInstructionInfo(InstructionEncoding.ExtRmRi, new[] { InstOpXmm, InstOpImm }, InstFlagNone, 0, InstOpCode_PP_66 | InstOpCode_MM_0F00 | 0x73U | (7L << (int)InstOpCode_O_Shift))); //SSE2 
        public static InstInfo Psllq       = new InstInfo(0xF3 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtRmRi_P, new[] { InstOpMmXmm, InstOpMmXmmMem | InstOpImm }, InstFlagNone, 0, InstOpCode_MM_0F00 | 0x73U | (6L << (int)InstOpCode_O_Shift) )); //MMX/SSE2
        public static InstInfo Psllw       = new InstInfo(0xF1 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtRmRi_P, new[] { InstOpMmXmm, InstOpMmXmmMem | InstOpImm }, InstFlagNone, 0, InstOpCode_MM_0F00 | 0x71U | (6L << (int)InstOpCode_O_Shift) )); //MMX/SSE2
        public static InstInfo Psrad       = new InstInfo(0xE2 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtRmRi_P, new[] { InstOpMmXmm, InstOpMmXmmMem | InstOpImm }, InstFlagNone, 0, InstOpCode_MM_0F00 | 0x72U | (4L << (int)InstOpCode_O_Shift) )); //MMX/SSE2
        public static InstInfo Psraw       = new InstInfo(0xE1 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtRmRi_P, new[] { InstOpMmXmm, InstOpMmXmmMem | InstOpImm }, InstFlagNone, 0, InstOpCode_MM_0F00 | 0x71U | (4L << (int)InstOpCode_O_Shift) )); //MMX/SSE2
        public static InstInfo Psrld       = new InstInfo(0xD2 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtRmRi_P, new[] { InstOpMmXmm, InstOpMmXmmMem | InstOpImm }, InstFlagNone, 0, InstOpCode_MM_0F00 | 0x72U | (2L << (int)InstOpCode_O_Shift) )); //MMX/SSE2
        public static InstInfo Psrldq      = new InstInfo(0x00, new ExtendedInstructionInfo(InstructionEncoding.ExtRmRi, new[] { InstOpXmm, InstOpImm }, InstFlagNone, 0, InstOpCode_PP_66 | InstOpCode_MM_0F00 | 0x73U | (3L << (int)InstOpCode_O_Shift))); //SSE2 
        public static InstInfo Psrlq       = new InstInfo(0xD3 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtRmRi_P, new[] { InstOpMmXmm, InstOpMmXmmMem | InstOpImm }, InstFlagNone, 0, InstOpCode_MM_0F00 | 0x73U | (2L << (int)InstOpCode_O_Shift) )); //MMX/SSE2
        public static InstInfo Psrlw       = new InstInfo(0xD1 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.ExtRmRi_P, new[] { InstOpMmXmm, InstOpMmXmmMem | InstOpImm }, InstFlagNone, 0, InstOpCode_MM_0F00 | 0x71U | (2L << (int)InstOpCode_O_Shift) )); //MMX/SSE2
        public static InstInfo Psubb       = new InstInfo(0xF8 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Psubd       = new InstInfo(0xFA | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Psubq       = new InstInfo(0xFB | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //SSE2
        public static InstInfo Psubsb      = new InstInfo(0xE8 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Psubsw      = new InstInfo(0xE9 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Psubusb     = new InstInfo(0xD8 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Psubusw     = new InstInfo(0xD9 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Psubw       = new InstInfo(0xF9 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Pswapd      = new InstInfo(0xBB | InstOpCode_MM_0F00, Pf2id.ExtendedInfo); //Enhanced 3dNow!
        public static InstInfo Ptest       = new InstInfo(0x17 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Comisd.ExtendedInfo); //SSE4.1
        public static InstInfo Punpckhbw   = new InstInfo(0x68 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Punpckhdq   = new InstInfo(0x6A | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Punpckhqdq  = new InstInfo(0x6D | InstOpCode_PP_66 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE2
        public static InstInfo Punpckhwd   = new InstInfo(0x69 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Punpcklbw   = new InstInfo(0x60 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Punpckldq   = new InstInfo(0x62 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Punpcklqdq  = new InstInfo(0x6C | InstOpCode_PP_66 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE2
        public static InstInfo Punpcklwd   = new InstInfo(0x61 | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Push        = new InstInfo(0xFF | (6L << (int)InstOpCode_O_Shift), new ExtendedInstructionInfo(InstructionEncoding.X86Push, null, InstFlagNone | InstFlagSpecial, 0, 0x50U )); //X86/X64
        public static InstInfo Pusha       = new InstInfo(0x60, Cbw.ExtendedInfo); //X86 only
        public static InstInfo Pushf       = new InstInfo(0x9C, Cbw.ExtendedInfo); //X86/X64
        public static InstInfo Pxor        = new InstInfo(0xEF | InstOpCode_MM_0F00, Pabsb.ExtendedInfo); //MMX/SSE2
        public static InstInfo Rcl         = new InstInfo(0xD0 | (2L << (int)InstOpCode_O_Shift), new ExtendedInstructionInfo(InstructionEncoding.X86Rot, new[] { InstOpGqdwbMem, InstOpGb | InstOpImm }, InstFlagNone | InstFlagSpecial)); //X86/X64
        public static InstInfo Rcpps       = new InstInfo(0x53 | InstOpCode_MM_0F00, Cvtdq2pd.ExtendedInfo); //SSE
        public static InstInfo Rcpss       = new InstInfo(0x53 | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Cvtsd2ss.ExtendedInfo); //SSE
        public static InstInfo Rcr         = new InstInfo(0xD0 | (3L << (int)InstOpCode_O_Shift), Rcl.ExtendedInfo); //X86/X64
        public static InstInfo Rdfsbase    = new InstInfo(0xAE | InstOpCode_PP_F3 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.X86Rm, new[] { InstOpGqd }, InstFlagMove, 8)); //FSGSBASE (x64)
        public static InstInfo Rdgsbase    = new InstInfo(0xAE | InstOpCode_PP_F3 | InstOpCode_MM_0F00 | (1L << (int)InstOpCode_O_Shift), Rdfsbase.ExtendedInfo); //FSGSBASE (x64) 
        public static InstInfo Rdrand      = new InstInfo(0xC7 | InstOpCode_MM_0F00 | (6L << (int)InstOpCode_O_Shift), new ExtendedInstructionInfo(InstructionEncoding.X86Rm, new[] { InstOpGqdw }, InstFlagMove, 8)); //RDRAND
        public static InstInfo Rdtsc       = new InstInfo(0x31 | InstOpCode_MM_0F00, Cbw.ExtendedInfo); //X86/X64
        public static InstInfo Rdtscp      = new InstInfo(0xF9 | InstOpCode_MM_0F01, Cbw.ExtendedInfo); //X86/X64
        public static InstInfo RepLodsB    = new InstInfo(0xAC | (1L << (int)InstOpCode_O_Shift), new ExtendedInstructionInfo(InstructionEncoding.X86Rep, new[] { InstOpMem }, InstFlagNone | InstFlagSpecial)); //X86/X64 (REP)
        public static InstInfo RepLodsD    = new InstInfo(0xAD | (1L << (int)InstOpCode_O_Shift), RepLodsB.ExtendedInfo); //X86/X64 (REP)
        public static InstInfo RepLodsQ    = new InstInfo(0xAD | (1L << (int)InstOpCode_O_Shift) | InstTable_W_W, RepLodsB.ExtendedInfo); //X64 only (REP)
        public static InstInfo RepLodsW    = new InstInfo(0xAD | InstOpCode_PP_66 | (1L << (int)InstOpCode_O_Shift), RepLodsB.ExtendedInfo); //X86/X64 (REP)
        
        public static InstInfo RepMovsB    = new InstInfo(0xA4 | (1L << (int)InstOpCode_O_Shift), new ExtendedInstructionInfo(InstructionEncoding.X86Rep, new[] { InstOpMem, InstOpMem }, InstFlagNone | InstFlagSpecial)); //X86/X64 (REP)
        public static InstInfo RepMovsD    = new InstInfo(0xA5 | (1L << (int)InstOpCode_O_Shift), RepMovsB.ExtendedInfo); //X86/X64 (REP)
        public static InstInfo RepMovsQ    = new InstInfo(0xA5 | (1L << (int)InstOpCode_O_Shift) | InstTable_W_W, RepMovsB.ExtendedInfo); //X64 only (REP)
        public static InstInfo RepMovsW    = new InstInfo(0xA5 | InstOpCode_PP_66 | (1L << (int)InstOpCode_O_Shift), RepMovsB.ExtendedInfo); //X86/X64 (REP)
        public static InstInfo RepStosB    = new InstInfo(0xAA | (1L << (int)InstOpCode_O_Shift), RepLodsB.ExtendedInfo); //X86/X64 (REP)
        public static InstInfo RepStosD    = new InstInfo(0xAB | (1L << (int)InstOpCode_O_Shift), RepLodsB.ExtendedInfo); //X86/X64 (REP)
        public static InstInfo RepStosQ    = new InstInfo(0xAB | (1L << (int)InstOpCode_O_Shift) | InstTable_W_W, RepLodsB.ExtendedInfo); //X64 only (REP)
        public static InstInfo RepStosW    = new InstInfo(0xAB | InstOpCode_PP_66 | (1L << (int)InstOpCode_O_Shift), RepLodsB.ExtendedInfo); //X86/X64 (REP)
        
        public static InstInfo RepeCmpsB   = new InstInfo(0xA6 | (1L << (int)InstOpCode_O_Shift), RepMovsB.ExtendedInfo); //X86/X64 (REP)
        public static InstInfo RepeCmpsD   = new InstInfo(0xA7 | (1L << (int)InstOpCode_O_Shift), RepMovsB.ExtendedInfo); //X86/X64 (REP)
        public static InstInfo RepeCmpsQ   = new InstInfo(0xA7 | (1L << (int)InstOpCode_O_Shift) | InstTable_W_W, RepMovsB.ExtendedInfo); //X64 only (REP)
        public static InstInfo RepeCmpsW   = new InstInfo(0xA7 | InstOpCode_PP_66 | (1L << (int)InstOpCode_O_Shift), RepMovsB.ExtendedInfo); //X86/X64 (REP)
        public static InstInfo RepeScasB   = new InstInfo(0xAE | (1L << (int)InstOpCode_O_Shift), RepMovsB.ExtendedInfo); //X86/X64 (REP)
        public static InstInfo RepeScasD   = new InstInfo(0xAF | (1L << (int)InstOpCode_O_Shift), RepMovsB.ExtendedInfo); //X86/X64 (REP)
        public static InstInfo RepeScasQ   = new InstInfo(0xAF | (1L << (int)InstOpCode_O_Shift) | InstTable_W_W, RepMovsB.ExtendedInfo); //X64 only (REP)
        public static InstInfo RepeScasW   = new InstInfo(0xAF | InstOpCode_PP_66 | (1L << (int)InstOpCode_O_Shift), RepMovsB.ExtendedInfo); //X86/X64 (REP)
        public static InstInfo RepneCmpsB  = new InstInfo(0xA6, RepMovsB.ExtendedInfo); //X86/X64 (REP)
        public static InstInfo RepneCmpsD  = new InstInfo(0xA7, RepMovsB.ExtendedInfo); //X86/X64 (REP)
        public static InstInfo RepneCmpsQ  = new InstInfo(0xA7 | InstTable_W_W, RepMovsB.ExtendedInfo); //X64 only (REP)
        public static InstInfo RepneCmpsW  = new InstInfo(0xA7 | InstOpCode_PP_66, RepMovsB.ExtendedInfo); //X86/X64 (REP)
        public static InstInfo RepneScasB  = new InstInfo(0xAE, RepMovsB.ExtendedInfo); //X86/X64 (REP)
        public static InstInfo RepneScasD  = new InstInfo(0xAF, RepMovsB.ExtendedInfo); //X86/X64 (REP)
        public static InstInfo RepneScasQ  = new InstInfo(0xAF | InstTable_W_W, RepMovsB.ExtendedInfo); //X64 only (REP)
        public static InstInfo RepneScasW  = new InstInfo(0xAF | InstOpCode_PP_66, RepMovsB.ExtendedInfo); //X86/X64 (REP)
        public static InstInfo Ret         = new InstInfo(0xC2, new ExtendedInstructionInfo(InstructionEncoding.X86Ret, null, InstFlagNone | InstFlagSpecial)); //X86/X64
        public static InstInfo Rol         = new InstInfo(0xD0, Rcl.ExtendedInfo); //X86/X64
        public static InstInfo Ror         = new InstInfo(0xD0 | (1L << (int)InstOpCode_O_Shift), Rcl.ExtendedInfo); //X86/X64
        public static InstInfo Rorx        = new InstInfo(0xF0 | InstOpCode_PP_F2 | InstOpCode_MM_0F3A, new ExtendedInstructionInfo(InstructionEncoding.AvxRmi, new[] { InstOpGqd, InstOpGqdMem, InstOpImm })); //BMI2
        public static InstInfo Roundpd     = new InstInfo(0x09 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Pshufd.ExtendedInfo); //SSE4.1
        public static InstInfo Roundps     = new InstInfo(0x08 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Pshufd.ExtendedInfo); //SSE4.1
        public static InstInfo Roundsd     = new InstInfo(0x0B | InstOpCode_PP_66 | InstOpCode_MM_0F3A, new ExtendedInstructionInfo(InstructionEncoding.ExtRmi, new[] { InstOpXmm, InstOpXmmMem, InstOpImm }, InstFlagMove, 8)); //SSE4.1
        public static InstInfo Roundss     = new InstInfo(0x0A | InstOpCode_PP_66 | InstOpCode_MM_0F3A, new ExtendedInstructionInfo(InstructionEncoding.ExtRmi, new[] { InstOpXmm, InstOpXmmMem, InstOpImm }, InstFlagMove, 4)); //SSE4.1
        public static InstInfo Rsqrtps     = new InstInfo(0x52 | InstOpCode_MM_0F00, Cvtdq2pd.ExtendedInfo); //SSE
        public static InstInfo Rsqrtss     = new InstInfo(0x52 | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Cvtsd2ss.ExtendedInfo); //SSE
        public static InstInfo Sahf        = new InstInfo(0x9E, Cbw.ExtendedInfo); //X86/X64 (CPUID NEEDED)
        public static InstInfo Sal         = new InstInfo(0xD0 | (4L << (int)InstOpCode_O_Shift), Rcl.ExtendedInfo); //X86/X64
        public static InstInfo Sar         = new InstInfo(0xD0 | (7L << (int)InstOpCode_O_Shift), Rcl.ExtendedInfo); //X86/X64
        public static InstInfo Sarx        = new InstInfo(0xF7 | InstOpCode_PP_F3 | InstOpCode_MM_0F38, Bextr.ExtendedInfo); //BMI2
        public static InstInfo Sbb         = new InstInfo(0x18 | (3L << (int)InstOpCode_O_Shift), Adc.ExtendedInfo); //X86/X64
        public static InstInfo ScasB       = new InstInfo(0xAE, Cbw.ExtendedInfo); //SCAS - X86/X64
        public static InstInfo ScasD       = new InstInfo(0xAF, Cbw.ExtendedInfo); //SCAS - X86/X64
        public static InstInfo ScasQ       = new InstInfo(0xAF | InstTable_W_W, Cbw.ExtendedInfo); //SCAS - X64
        public static InstInfo ScasW       = new InstInfo(0xAF, CmpsW.ExtendedInfo); //SCAS - X86/X64
        public static InstInfo Seta        = new InstInfo(0x97 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.X86Set, new[] { InstOpGbMem }, InstFlagMove, 1)); //X86/X64 (setcc)
        public static InstInfo Setae       = new InstInfo(0x93 | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Setb        = new InstInfo(0x92 | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Setbe       = new InstInfo(0x96 | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Setc        = new InstInfo(0x92 | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Sete        = new InstInfo(0x94 | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Setg        = new InstInfo(0x9F | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Setge       = new InstInfo(0x9D | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Setl        = new InstInfo(0x9C | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Setle       = new InstInfo(0x9E | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Setna       = new InstInfo(0x96 | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Setnae      = new InstInfo(0x92 | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Setnb       = new InstInfo(0x93 | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Setnbe      = new InstInfo(0x97 | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Setnc       = new InstInfo(0x93 | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Setne       = new InstInfo(0x95 | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Setng       = new InstInfo(0x9E | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Setnge      = new InstInfo(0x9C | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Setnl       = new InstInfo(0x9D | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Setnle      = new InstInfo(0x9F | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Setno       = new InstInfo(0x91 | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Setnp       = new InstInfo(0x9B | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Setns       = new InstInfo(0x99 | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Setnz       = new InstInfo(0x95 | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Seto        = new InstInfo(0x90 | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Setp        = new InstInfo(0x9A | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Setpe       = new InstInfo(0x9A | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Setpo       = new InstInfo(0x9B | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Sets        = new InstInfo(0x98 | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Setz        = new InstInfo(0x94 | InstOpCode_MM_0F00, Seta.ExtendedInfo); //X86/X64 (setcc)
        public static InstInfo Sfence      = new InstInfo(0xAE | InstOpCode_MM_0F00 | (7L << (int)InstOpCode_O_Shift), Lfence.ExtendedInfo); //MMX-Ext/SSE
        public static InstInfo Shl         = new InstInfo(0xD0 | (4L << (int)InstOpCode_O_Shift), Rcl.ExtendedInfo); //X86/X64
        public static InstInfo Shld        = new InstInfo(0xA4 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.X86Shlrd, new[] { InstOpGqdwbMem, InstOpGb }, InstFlagNone | InstFlagSpecial)); //X86/X64
        public static InstInfo Shlx        = new InstInfo(0xF7 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Bextr.ExtendedInfo); //BMI2
        public static InstInfo Shr         = new InstInfo(0xD0 | (5L << (int)InstOpCode_O_Shift), Rcl.ExtendedInfo); //X86/X64
        public static InstInfo Shrd        = new InstInfo(0xAC | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.X86Shlrd, new[] { InstOpGqdwbMem, InstOpGqdwb }, InstFlagNone | InstFlagSpecial)); //X86/X64
        public static InstInfo Shrx        = new InstInfo(0xF7 | InstOpCode_PP_F2 | InstOpCode_MM_0F38, Bextr.ExtendedInfo); //BMI2
        public static InstInfo Shufpd      = new InstInfo(0xC6 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Aeskeygenassist.ExtendedInfo); //SSE2
        public static InstInfo Shufps      = new InstInfo(0xC6 | InstOpCode_MM_0F00, Aeskeygenassist.ExtendedInfo); //SSE
        public static InstInfo Sqrtpd      = new InstInfo(0x51 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Cvtdq2pd.ExtendedInfo); //SSE2
        public static InstInfo Sqrtps      = new InstInfo(0x51 | InstOpCode_MM_0F00, Cvtdq2pd.ExtendedInfo); //SSE
        public static InstInfo Sqrtsd      = new InstInfo(0x51 | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Cvtss2sd.ExtendedInfo); //SSE2
        public static InstInfo Sqrtss      = new InstInfo(0x51 | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Cvtsd2ss.ExtendedInfo); //SSE
        public static InstInfo Stc         = new InstInfo(0xF9, Clc.ExtendedInfo); //X86/X64
        public static InstInfo Std         = new InstInfo(0xFD, Clc.ExtendedInfo); //X86/X64
        public static InstInfo Stmxcsr     = new InstInfo(0xAE | InstOpCode_MM_0F00 | (3L << (int)InstOpCode_O_Shift), Clflush.ExtendedInfo); //SSE
        public static InstInfo StosB       = new InstInfo(0xAA, Cbw.ExtendedInfo); //STOS - X86/X64
        public static InstInfo StosD       = new InstInfo(0xAB, Cbw.ExtendedInfo); //STOS - X86/X64
        public static InstInfo StosQ       = new InstInfo(0xAB | InstTable_W_W, Cbw.ExtendedInfo); //STOS - X64
        public static InstInfo StosW       = new InstInfo(0xAB, CmpsW.ExtendedInfo); //STOS - X86/X64
        public static InstInfo Sub         = new InstInfo(0x28 | (5L << (int)InstOpCode_O_Shift), Adc.ExtendedInfo); //X86/X64
        public static InstInfo Subpd       = new InstInfo(0x5C | InstOpCode_PP_66 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE2
        public static InstInfo Subps       = new InstInfo(0x5C | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE
        public static InstInfo Subsd       = new InstInfo(0x5C | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE2
        public static InstInfo Subss       = new InstInfo(0x5C | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE
        public static InstInfo Test        = new InstInfo(0x84 | InstOpCode_MM_0000, new ExtendedInstructionInfo(InstructionEncoding.X86Test, new[] { InstOpGqdwbMem, InstOpGqdwb | InstOpImm }, InstFlagTest, 0, (0xF6) )); //X86/X64 
        public static InstInfo Tzcnt       = new InstInfo(0xBC | InstOpCode_PP_F3 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.X86RegRm, new[] { InstOpGqdw, InstOpGqdwMem }, InstFlagMove)); //TZCNT
        public static InstInfo Ucomisd     = new InstInfo(0x2E | InstOpCode_PP_66 | InstOpCode_MM_0F00, Comisd.ExtendedInfo); //SSE2
        public static InstInfo Ucomiss     = new InstInfo(0x2E | InstOpCode_MM_0F00, Comisd.ExtendedInfo); //SSE
        public static InstInfo Ud2         = new InstInfo(0x0B | InstOpCode_MM_0F00, Clc.ExtendedInfo); //X86/X64
        public static InstInfo Unpckhpd    = new InstInfo(0x15 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE2
        public static InstInfo Unpckhps    = new InstInfo(0x15 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE
        public static InstInfo Unpcklpd    = new InstInfo(0x14 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE2
        public static InstInfo Unpcklps    = new InstInfo(0x14 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE
        public static InstInfo Vaddpd      = new InstInfo(0x58 | InstOpCode_PP_66 | InstOpCode_MM_0F00 | InstTable_E_1, new ExtendedInstructionInfo(InstructionEncoding.AvxRvm_P, new[] { InstOpXy, InstOpXy, InstOpXyMem }, InstFlagAvx)); //AVX|
        public static InstInfo Vaddps      = new InstInfo(0x58 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vaddsd      = new InstInfo(0x58 | InstOpCode_PP_F2 | InstOpCode_MM_0F00 | InstTable_E_1, new ExtendedInstructionInfo(InstructionEncoding.AvxRvm, new[] { InstOpXmm, InstOpXmm, InstOpXmmMem }, InstFlagAvx)); //AVX| 
        public static InstInfo Vaddss      = new InstInfo(0x58 | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Vaddsd.ExtendedInfo); //AVX| 
        public static InstInfo Vaddsubpd   = new InstInfo(0xD0 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vaddsubps   = new InstInfo(0xD0 | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vaesdec     = new InstInfo(0xDE | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddsd.ExtendedInfo); //AVX+AESNI
        public static InstInfo Vaesdeclast = new InstInfo(0xDF | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddsd.ExtendedInfo); //AVX+AESNI
        public static InstInfo Vaesenc     = new InstInfo(0xDC | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddsd.ExtendedInfo); //AVX+AESNI
        public static InstInfo Vaesenclast = new InstInfo(0xDD | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddsd.ExtendedInfo); //AVX+AESNI
        public static InstInfo Vaesimc     = new InstInfo(0xDB | InstOpCode_PP_66 | InstOpCode_MM_0F38, new ExtendedInstructionInfo(InstructionEncoding.AvxRm, new[] { InstOpXmm, InstOpXmmMem }, InstFlagAvx)); //AVX+AESNI
        public static InstInfo Vaeskeygenassist = new InstInfo(0xDF | InstOpCode_PP_66 | InstOpCode_MM_0F3A, new ExtendedInstructionInfo(InstructionEncoding.AvxRmi, new[] { InstOpXmm, InstOpXmmMem, InstOpImm }, InstFlagAvx)); //AVX+AESNI
        public static InstInfo Vandnpd     = new InstInfo(0x55 | InstOpCode_PP_66 | InstOpCode_MM_0F00 | InstTable_E_1, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vandnps     = new InstInfo(0x55 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vandpd      = new InstInfo(0x54 | InstOpCode_PP_66 | InstOpCode_MM_0F00 | InstTable_E_1, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vandps      = new InstInfo(0x54 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vblendpd    = new InstInfo(0x0D | InstOpCode_PP_66 | InstOpCode_MM_0F3A, new ExtendedInstructionInfo(InstructionEncoding.AvxRvmi_P, new[] { InstOpXy, InstOpXy, InstOpXyMem, InstOpImm }, InstFlagAvx)); //AVX
        public static InstInfo Vblendps    = new InstInfo(0x0C | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vblendpd.ExtendedInfo); //AVX
        public static InstInfo Vblendvpd   = new InstInfo(0x4B | InstOpCode_PP_66 | InstOpCode_MM_0F3A, new ExtendedInstructionInfo(InstructionEncoding.AvxRvmr_P, new[] { InstOpXy, InstOpXy, InstOpXyMem, InstOpXy }, InstFlagAvx)); //AVX
        public static InstInfo Vblendvps   = new InstInfo(0x4A | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vblendvpd.ExtendedInfo); //AVX
        public static InstInfo Vbroadcastf128 = new InstInfo(0x1A | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_L_L, new ExtendedInstructionInfo(InstructionEncoding.AvxRm, new[] { InstOpYmm, InstOpMem }, InstFlagAvx)); //AVX
        public static InstInfo Vbroadcasti128 = new InstInfo(0x5A | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_L_L, Vbroadcastf128.ExtendedInfo); //AVX2
        public static InstInfo Vbroadcastsd = new InstInfo(0x19 | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_L_L | InstTable_E_1, new ExtendedInstructionInfo(InstructionEncoding.AvxRm, new[] { InstOpYmm, InstOpXmmMem }, InstFlagAvx)); //AVX/AVX2| 
        public static InstInfo Vbroadcastss = new InstInfo(0x18 | InstOpCode_PP_66 | InstOpCode_MM_0F38, new ExtendedInstructionInfo(InstructionEncoding.AvxRm_P, new[] { InstOpXy, InstOpXmmMem }, InstFlagAvx)); //AVX/AVX2|
        public static InstInfo Vcmppd      = new InstInfo(0xC2 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vblendpd.ExtendedInfo); //AVX
        public static InstInfo Vcmpps      = new InstInfo(0xC2 | InstOpCode_MM_0F00, Vblendpd.ExtendedInfo); //AVX
        public static InstInfo Vcmpsd      = new InstInfo(0xC2 | InstOpCode_PP_F2 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRvmi, new[] { InstOpXmm, InstOpXmm, InstOpXmmMem, InstOpImm }, InstFlagAvx)); //AVX
        public static InstInfo Vcmpss      = new InstInfo(0xC2 | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Vcmpsd.ExtendedInfo); //AVX
        public static InstInfo Vcomisd     = new InstInfo(0x2F | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaesimc.ExtendedInfo); //AVX
        public static InstInfo Vcomiss     = new InstInfo(0x2F | InstOpCode_MM_0F00, Vaesimc.ExtendedInfo); //AVX
        public static InstInfo Vcvtdq2pd   = new InstInfo(0xE6 | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Vbroadcastss.ExtendedInfo); //AVX
        public static InstInfo Vcvtdq2ps   = new InstInfo(0x5B | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRm_P, new[] { InstOpXy, InstOpXyMem }, InstFlagAvx)); //AVX
        public static InstInfo Vcvtpd2dq   = new InstInfo(0xE6 | InstOpCode_PP_F2 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRm, new[] { InstOpXmm, InstOpXyMem }, InstFlagAvx)); //AVX
        public static InstInfo Vcvtpd2ps   = new InstInfo(0x5A | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vcvtpd2dq.ExtendedInfo); //AVX
        public static InstInfo Vcvtph2ps   = new InstInfo(0x13 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vbroadcastss.ExtendedInfo); //F16C
        public static InstInfo Vcvtps2dq   = new InstInfo(0x5B | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vcvtdq2ps.ExtendedInfo); //AVX
        public static InstInfo Vcvtps2pd   = new InstInfo(0x5A | InstOpCode_MM_0F00, Vbroadcastss.ExtendedInfo); //AVX
        public static InstInfo Vcvtps2ph   = new InstInfo(0x1D | InstOpCode_PP_66 | InstOpCode_MM_0F3A, new ExtendedInstructionInfo(InstructionEncoding.AvxMri_P, new[] { InstOpXmmMem, InstOpXy, InstOpImm }, InstFlagAvx)); //F16C
        public static InstInfo Vcvtsd2si   = new InstInfo(0x2D | InstOpCode_PP_F2 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRm, new[] { InstOpGqd, InstOpXmmMem }, InstFlagAvx)); //AVX
        public static InstInfo Vcvtsd2ss   = new InstInfo(0x5A | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Vaddsd.ExtendedInfo); //AVX
        public static InstInfo Vcvtsi2sd   = new InstInfo(0x2A | InstOpCode_PP_F2 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRvm, new[] { InstOpXmm, InstOpXmm, InstOpGqdMem }, InstFlagAvx)); //AVX
        public static InstInfo Vcvtsi2ss   = new InstInfo(0x2A | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Vcvtsi2sd.ExtendedInfo); //AVX
        public static InstInfo Vcvtss2sd   = new InstInfo(0x5A | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Vaddsd.ExtendedInfo); //AVX
        public static InstInfo Vcvtss2si   = new InstInfo(0x2D | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Vcvtsd2si.ExtendedInfo); //AVX
        public static InstInfo Vcvttpd2dq  = new InstInfo(0xE6 | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRm_P, new[] { InstOpXmm, InstOpXyMem }, InstFlagAvx)); //AVX
        public static InstInfo Vcvttps2dq  = new InstInfo(0x5B | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Vcvtdq2ps.ExtendedInfo); //AVX
        public static InstInfo Vcvttsd2si  = new InstInfo(0x2C | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Vcvtsd2si.ExtendedInfo); //AVX
        public static InstInfo Vcvttss2si  = new InstInfo(0x2C | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Vcvtsd2si.ExtendedInfo); //AVX
        public static InstInfo Vdivpd      = new InstInfo(0x5E | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vdivps      = new InstInfo(0x5E | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vdivsd      = new InstInfo(0x5E | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Vaddsd.ExtendedInfo); //AVX
        public static InstInfo Vdivss      = new InstInfo(0x5E | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Vaddsd.ExtendedInfo); //AVX
        public static InstInfo Vdppd       = new InstInfo(0x41 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vcmpsd.ExtendedInfo); //AVX
        public static InstInfo Vdpps       = new InstInfo(0x40 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vblendpd.ExtendedInfo); //AVX
        public static InstInfo Vextractf128 = new InstInfo(0x19 | InstOpCode_PP_66 | InstOpCode_MM_0F3A | InstTable_L_L, new ExtendedInstructionInfo(InstructionEncoding.AvxMri, new[] { InstOpXmmMem, InstOpYmm, InstOpImm }, InstFlagAvx)); //AVX
        public static InstInfo Vextracti128 = new InstInfo(0x39 | InstOpCode_PP_66 | InstOpCode_MM_0F3A | InstTable_L_L, Vextractf128.ExtendedInfo); //AVX2
        public static InstInfo Vextractps  = new InstInfo(0x17 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, new ExtendedInstructionInfo(InstructionEncoding.AvxMri, new[] { InstOpGqdMem, InstOpXmm, InstOpImm }, InstFlagAvx)); //AVX
        public static InstInfo Vfmadd132pd = new InstInfo(0x98 | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfmadd132ps = new InstInfo(0x98 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfmadd132sd = new InstInfo(0x99 | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddsd.ExtendedInfo); //FMA3
        public static InstInfo Vfmadd132ss = new InstInfo(0x99 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddsd.ExtendedInfo); //FMA3
        public static InstInfo Vfmadd213pd = new InstInfo(0xA8 | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfmadd213ps = new InstInfo(0xA8 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfmadd213sd = new InstInfo(0xA9 | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddsd.ExtendedInfo); //FMA3
        public static InstInfo Vfmadd213ss = new InstInfo(0xA9 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddsd.ExtendedInfo); //FMA3
        public static InstInfo Vfmadd231pd = new InstInfo(0xB8 | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfmadd231ps = new InstInfo(0xB8 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfmadd231sd = new InstInfo(0xB9 | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddsd.ExtendedInfo); //FMA3
        public static InstInfo Vfmadd231ss = new InstInfo(0xB9 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddsd.ExtendedInfo); //FMA3
        public static InstInfo Vfmaddpd    = new InstInfo(0x69 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, new ExtendedInstructionInfo(InstructionEncoding.Fma4_P, new[] { InstOpXy, InstOpXy, InstOpXyMem, InstOpXyMem }, InstFlagAvx)); //FMA4
        public static InstInfo Vfmaddps    = new InstInfo(0x68 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vfmaddpd.ExtendedInfo); //FMA4
        public static InstInfo Vfmaddsd    = new InstInfo(0x6B | InstOpCode_PP_66 | InstOpCode_MM_0F3A, new ExtendedInstructionInfo(InstructionEncoding.Fma4, new[] { InstOpXmm, InstOpXmm, InstOpXmmMem, InstOpXmmMem }, InstFlagAvx)); //FMA4
        public static InstInfo Vfmaddss    = new InstInfo(0x6A | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vfmaddsd.ExtendedInfo); //FMA4
        public static InstInfo Vfmaddsub132pd = new InstInfo(0x96 | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfmaddsub132ps = new InstInfo(0x96 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfmaddsub213pd = new InstInfo(0xA6 | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfmaddsub213ps = new InstInfo(0xA6 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfmaddsub231pd = new InstInfo(0xB6 | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfmaddsub231ps = new InstInfo(0xB6 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfmaddsubpd = new InstInfo(0x5D | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vfmaddpd.ExtendedInfo); //FMA4
        public static InstInfo Vfmaddsubps = new InstInfo(0x5C | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vfmaddpd.ExtendedInfo); //FMA4
        public static InstInfo Vfmsub132pd = new InstInfo(0x9A | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfmsub132ps = new InstInfo(0x9A | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfmsub132sd = new InstInfo(0x9B | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddsd.ExtendedInfo); //FMA3
        public static InstInfo Vfmsub132ss = new InstInfo(0x9B | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddsd.ExtendedInfo); //FMA3
        public static InstInfo Vfmsub213pd = new InstInfo(0xAA | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfmsub213ps = new InstInfo(0xAA | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfmsub213sd = new InstInfo(0xAB | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddsd.ExtendedInfo); //FMA3
        public static InstInfo Vfmsub213ss = new InstInfo(0xAB | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddsd.ExtendedInfo); //FMA3
        public static InstInfo Vfmsub231pd = new InstInfo(0xBA | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfmsub231ps = new InstInfo(0xBA | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfmsub231sd = new InstInfo(0xBB | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddsd.ExtendedInfo); //FMA3
        public static InstInfo Vfmsub231ss = new InstInfo(0xBB | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddsd.ExtendedInfo); //FMA3
        public static InstInfo Vfmsubadd132pd = new InstInfo(0x97 | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfmsubadd132ps = new InstInfo(0x97 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfmsubadd213pd = new InstInfo(0xA7 | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfmsubadd213ps = new InstInfo(0xA7 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfmsubadd231pd = new InstInfo(0xB7 | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfmsubadd231ps = new InstInfo(0xB7 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfmsubaddpd = new InstInfo(0x5F | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vfmaddpd.ExtendedInfo); //FMA4
        public static InstInfo Vfmsubaddps = new InstInfo(0x5E | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vfmaddpd.ExtendedInfo); //FMA4
        public static InstInfo Vfmsubpd    = new InstInfo(0x6D | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vfmaddpd.ExtendedInfo); //FMA4
        public static InstInfo Vfmsubps    = new InstInfo(0x6C | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vfmaddpd.ExtendedInfo); //FMA4
        public static InstInfo Vfmsubsd    = new InstInfo(0x6F | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vfmaddsd.ExtendedInfo); //FMA4
        public static InstInfo Vfmsubss    = new InstInfo(0x6E | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vfmaddsd.ExtendedInfo); //FMA4
        public static InstInfo Vfnmadd132pd = new InstInfo(0x9C | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfnmadd132ps = new InstInfo(0x9C | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfnmadd132sd = new InstInfo(0x9D | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddsd.ExtendedInfo); //FMA3
        public static InstInfo Vfnmadd132ss = new InstInfo(0x9D | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddsd.ExtendedInfo); //FMA3
        public static InstInfo Vfnmadd213pd = new InstInfo(0xAC | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfnmadd213ps = new InstInfo(0xAC | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfnmadd213sd = new InstInfo(0xAD | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddsd.ExtendedInfo); //FMA3
        public static InstInfo Vfnmadd213ss = new InstInfo(0xAD | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddsd.ExtendedInfo); //FMA3
        public static InstInfo Vfnmadd231pd = new InstInfo(0xBC | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfnmadd231ps = new InstInfo(0xBC | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfnmadd231sd = new InstInfo(0xBC | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddsd.ExtendedInfo); //FMA3
        public static InstInfo Vfnmadd231ss = new InstInfo(0xBC | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddsd.ExtendedInfo); //FMA3
        public static InstInfo Vfnmaddpd   = new InstInfo(0x79 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vfmaddpd.ExtendedInfo); //FMA4
        public static InstInfo Vfnmaddps   = new InstInfo(0x78 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vfmaddpd.ExtendedInfo); //FMA4
        public static InstInfo Vfnmaddsd   = new InstInfo(0x7B | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vfmaddsd.ExtendedInfo); //FMA4
        public static InstInfo Vfnmaddss   = new InstInfo(0x7A | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vfmaddsd.ExtendedInfo); //FMA4
        public static InstInfo Vfnmsub132pd = new InstInfo(0x9E | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfnmsub132ps = new InstInfo(0x9E | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfnmsub132sd = new InstInfo(0x9F | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddsd.ExtendedInfo); //FMA3
        public static InstInfo Vfnmsub132ss = new InstInfo(0x9F | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddsd.ExtendedInfo); //FMA3
        public static InstInfo Vfnmsub213pd = new InstInfo(0xAE | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfnmsub213ps = new InstInfo(0xAE | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfnmsub213sd = new InstInfo(0xAF | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddsd.ExtendedInfo); //FMA3
        public static InstInfo Vfnmsub213ss = new InstInfo(0xAF | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddsd.ExtendedInfo); //FMA3
        public static InstInfo Vfnmsub231pd = new InstInfo(0xBE | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfnmsub231ps = new InstInfo(0xBE | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //FMA3
        public static InstInfo Vfnmsub231sd = new InstInfo(0xBF | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddsd.ExtendedInfo); //FMA3
        public static InstInfo Vfnmsub231ss = new InstInfo(0xBF | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddsd.ExtendedInfo); //FMA3
        public static InstInfo Vfnmsubpd   = new InstInfo(0x7D | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vfmaddpd.ExtendedInfo); //FMA4
        public static InstInfo Vfnmsubps   = new InstInfo(0x7C | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vfmaddpd.ExtendedInfo); //FMA4
        public static InstInfo Vfnmsubsd   = new InstInfo(0x7F | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vfmaddsd.ExtendedInfo); //FMA4
        public static InstInfo Vfnmsubss   = new InstInfo(0x7E | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vfmaddsd.ExtendedInfo); //FMA4
        public static InstInfo Vfrczpd     = new InstInfo(0x81 | InstOpCode_MM_01001, new ExtendedInstructionInfo(InstructionEncoding.XopRm_P, new[] { InstOpXy, InstOpXyMem }, InstFlagAvx)); //XOP
        public static InstInfo Vfrczps     = new InstInfo(0x80 | InstOpCode_MM_01001, Vfrczpd.ExtendedInfo); //XOP
        public static InstInfo Vfrczsd     = new InstInfo(0x83 | InstOpCode_MM_01001, new ExtendedInstructionInfo(InstructionEncoding.XopRm, new[] { InstOpXmm, InstOpXmmMem }, InstFlagAvx)); //XOP
        public static InstInfo Vfrczss     = new InstInfo(0x82 | InstOpCode_MM_01001, Vfrczsd.ExtendedInfo); //XOP
        public static InstInfo Vgatherdpd  = new InstInfo(0x92 | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, new ExtendedInstructionInfo(InstructionEncoding.AvxGather, new[] { InstOpXy, InstOpMem, InstOpXy }, InstFlagAvx)); //AVX2
        public static InstInfo Vgatherdps  = new InstInfo(0x92 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vgatherdpd.ExtendedInfo); //AVX2
        public static InstInfo Vgatherqpd  = new InstInfo(0x93 | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vgatherdpd.ExtendedInfo); //AVX2
        public static InstInfo Vgatherqps  = new InstInfo(0x93 | InstOpCode_PP_66 | InstOpCode_MM_0F38, new ExtendedInstructionInfo(InstructionEncoding.AvxGatherEx, new[] { InstOpXmm, InstOpMem, InstOpXmm }, InstFlagAvx)); //AVX2
        public static InstInfo Vhaddpd     = new InstInfo(0x7C | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vhaddps     = new InstInfo(0x7C | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vhsubpd     = new InstInfo(0x7D | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vhsubps     = new InstInfo(0x7D | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vinsertf128 = new InstInfo(0x18 | InstOpCode_PP_66 | InstOpCode_MM_0F3A | InstTable_L_L, new ExtendedInstructionInfo(InstructionEncoding.AvxRvmi, new[] { InstOpYmm, InstOpYmm, InstOpXmmMem, InstOpImm }, InstFlagAvx)); //AVX
        public static InstInfo Vinserti128 = new InstInfo(0x38 | InstOpCode_PP_66 | InstOpCode_MM_0F3A | InstTable_L_L, Vinsertf128.ExtendedInfo); //AVX2
        public static InstInfo Vinsertps   = new InstInfo(0x21 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vcmpsd.ExtendedInfo); //AVX
        public static InstInfo Vlddqu      = new InstInfo(0xF0 | InstOpCode_PP_F2 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRm_P, new[] { InstOpXy, InstOpMem }, InstFlagAvx)); //AVX
        public static InstInfo Vldmxcsr    = new InstInfo(0xAE | InstOpCode_MM_0F00 | (2L << (int)InstOpCode_O_Shift), new ExtendedInstructionInfo(InstructionEncoding.AvxM, new[] { InstOpMem }, InstFlagAvx)); //AVX
        public static InstInfo Vmaskmovdqu = new InstInfo(0xF7 | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRm, new[] { InstOpXmm, InstOpXmm }, InstFlagAvx)); //AVX
        public static InstInfo Vmaskmovpd  = new InstInfo(0x2D | InstOpCode_PP_66 | InstOpCode_MM_0F38, new ExtendedInstructionInfo(InstructionEncoding.AvxRvmMvr_P, new[] { InstOpXyMem, InstOpXy, InstOpXyMem }, InstFlagAvx, 0, InstOpCode_PP_66 | InstOpCode_MM_0F38 | (0x2F) )); //AVX 
        public static InstInfo Vmaskmovps  = new InstInfo(0x2C | InstOpCode_PP_66 | InstOpCode_MM_0F38, new ExtendedInstructionInfo(InstructionEncoding.AvxRvmMvr_P, new[] { InstOpXyMem, InstOpXy, InstOpXyMem }, InstFlagAvx, 0, InstOpCode_PP_66 | InstOpCode_MM_0F38 | (0x2E) )); //AVX 
        public static InstInfo Vmaxpd      = new InstInfo(0x5F | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vmaxps      = new InstInfo(0x5F | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vmaxsd      = new InstInfo(0x5F | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vmaxss      = new InstInfo(0x5F | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vminpd      = new InstInfo(0x5D | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vminps      = new InstInfo(0x5D | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vminsd      = new InstInfo(0x5D | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vminss      = new InstInfo(0x5D | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vmovapd     = new InstInfo(0x28 | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRmMr_P, new[] { InstOpXyMem, InstOpXyMem }, InstFlagAvx, 0, InstOpCode_PP_66 | InstOpCode_MM_0F00 | 0x29U )); //AVX 
        public static InstInfo Vmovaps     = new InstInfo(0x28 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRmMr_P, new[] { InstOpXyMem, InstOpXyMem }, InstFlagAvx, 0, InstOpCode_MM_0F00 | 0x29U )); //AVX 
        public static InstInfo Vmovd       = new InstInfo(0x6E | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxMovDQ, new[] { InstOpXmmMem, InstOpXmmMem }, InstFlagAvx, 0, InstOpCode_PP_66 | InstOpCode_MM_0F00 | (0x7E) )); //AVX 
        public static InstInfo Vmovddup    = new InstInfo(0x12 | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Vcvtdq2ps.ExtendedInfo); //AVX
        public static InstInfo Vmovdqa     = new InstInfo(0x6F | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRmMr_P, new[] { InstOpXyMem, InstOpXyMem }, InstFlagAvx, 0, InstOpCode_PP_66 | InstOpCode_MM_0F00 | (0x7F) )); //AVX 
        public static InstInfo Vmovdqu     = new InstInfo(0x6F | InstOpCode_PP_F3 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRmMr_P, new[] { InstOpXyMem, InstOpXyMem }, InstFlagAvx, 0, InstOpCode_PP_F3 | InstOpCode_MM_0F00 | (0x7F) )); //AVX 
        public static InstInfo Vmovhlps    = new InstInfo(0x12 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRvm, new[] { InstOpXmm, InstOpXmm, InstOpXmm }, InstFlagAvx)); //AVX
        public static InstInfo Vmovhpd     = new InstInfo(0x16 | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRvmMr, new[] { InstOpXmmMem, InstOpXmm, InstOpMem }, InstFlagAvx, 0, InstOpCode_PP_66 | InstOpCode_MM_0F00 | 0x17U )); //AVX 
        public static InstInfo Vmovhps     = new InstInfo(0x16 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRvmMr, new[] { InstOpXmmMem, InstOpXmm, InstOpMem }, InstFlagAvx, 0, InstOpCode_MM_0F00 | 0x17U )); //AVX 
        public static InstInfo Vmovlhps    = new InstInfo(0x16 | InstOpCode_MM_0F00, Vmovhlps.ExtendedInfo); //AVX
        public static InstInfo Vmovlpd     = new InstInfo(0x12 | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRvmMr, new[] { InstOpXmmMem, InstOpXmm, InstOpMem }, InstFlagAvx, 0, InstOpCode_PP_66 | InstOpCode_MM_0F00 | 0x13U )); //AVX 
        public static InstInfo Vmovlps     = new InstInfo(0x12 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRvmMr, new[] { InstOpXmmMem, InstOpXmm, InstOpMem }, InstFlagAvx, 0, InstOpCode_MM_0F00 | 0x13U )); //AVX 
        public static InstInfo Vmovmskpd   = new InstInfo(0x50 | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRm_P, new[] { InstOpGqd, InstOpXy }, InstFlagAvx)); //AVX
        public static InstInfo Vmovmskps   = new InstInfo(0x50 | InstOpCode_MM_0F00, Vmovmskpd.ExtendedInfo); //AVX
        public static InstInfo Vmovntdq    = new InstInfo(0xE7 | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxMr_P, new[] { InstOpMem, InstOpXy }, InstFlagAvx)); //AVX
        public static InstInfo Vmovntdqa   = new InstInfo(0x2A | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vlddqu.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vmovntpd    = new InstInfo(0x2B | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vmovntdq.ExtendedInfo); //AVX
        public static InstInfo Vmovntps    = new InstInfo(0x2B | InstOpCode_MM_0F00, Vmovntdq.ExtendedInfo); //AVX
        public static InstInfo Vmovq       = new InstInfo(0x6E | InstOpCode_PP_66 | InstOpCode_MM_0F00 | InstTable_W_W, Vmovd.ExtendedInfo); //AVX
        public static InstInfo Vmovsd      = new InstInfo(0x10 | InstOpCode_PP_F2 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxMovSsSd, new[] { InstOpXmmMem, InstOpXmmMem, InstOpXmm }, InstFlagAvx, 0, InstOpCode_PP_F2 | InstOpCode_MM_0F00 | 0x11U )); //AVX 
        public static InstInfo Vmovshdup   = new InstInfo(0x16 | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Vcvtdq2ps.ExtendedInfo); //AVX
        public static InstInfo Vmovsldup   = new InstInfo(0x12 | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Vcvtdq2ps.ExtendedInfo); //AVX
        public static InstInfo Vmovss      = new InstInfo(0x10 | InstOpCode_PP_F3 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxMovSsSd, new[] { InstOpXmmMem, InstOpXmm, InstOpXmm }, InstFlagAvx, 0, InstOpCode_PP_F3 | InstOpCode_MM_0F00 | 0x11U )); //AVX 
        public static InstInfo Vmovupd     = new InstInfo(0x10 | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRmMr_P, new[] { InstOpXyMem, InstOpXyMem }, InstFlagAvx, 0, InstOpCode_PP_66 | InstOpCode_MM_0F00 | 0x11U )); //AVX 
        public static InstInfo Vmovups     = new InstInfo(0x10 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRmMr_P, new[] { InstOpXyMem, InstOpXyMem }, InstFlagAvx, 0, InstOpCode_MM_0F00 | 0x11U )); //AVX 
        public static InstInfo Vmpsadbw    = new InstInfo(0x42 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vblendpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vmulpd      = new InstInfo(0x59 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vmulps      = new InstInfo(0x59 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vmulsd      = new InstInfo(0x59 | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vmulss      = new InstInfo(0x59 | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vorpd       = new InstInfo(0x56 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vorps       = new InstInfo(0x56 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vpabsb      = new InstInfo(0x1C | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vcvtdq2ps.ExtendedInfo); //AVX2
        public static InstInfo Vpabsd      = new InstInfo(0x1E | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vcvtdq2ps.ExtendedInfo); //AVX2
        public static InstInfo Vpabsw      = new InstInfo(0x1D | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vcvtdq2ps.ExtendedInfo); //AVX2
        public static InstInfo Vpackssdw   = new InstInfo(0x6B | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpacksswb   = new InstInfo(0x63 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpackusdw   = new InstInfo(0x2B | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpackuswb   = new InstInfo(0x67 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpaddb      = new InstInfo(0xFC | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpaddd      = new InstInfo(0xFE | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpaddq      = new InstInfo(0xD4 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpaddsb     = new InstInfo(0xEC | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpaddsw     = new InstInfo(0xED | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpaddusb    = new InstInfo(0xDC | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpaddusw    = new InstInfo(0xDD | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpaddw      = new InstInfo(0xFD | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpalignr    = new InstInfo(0x0F | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vblendpd.ExtendedInfo); //AVX2
        public static InstInfo Vpand       = new InstInfo(0xDB | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpandn      = new InstInfo(0xDF | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpavgb      = new InstInfo(0xE0 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpavgw      = new InstInfo(0xE3 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpblendd    = new InstInfo(0x02 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vblendpd.ExtendedInfo); //AVX2
        public static InstInfo Vpblendvb   = new InstInfo(0x4C | InstOpCode_PP_66 | InstOpCode_MM_0F3A, new ExtendedInstructionInfo(InstructionEncoding.AvxRvmr, new[] { InstOpXy, InstOpXy, InstOpXyMem, InstOpXy }, InstFlagAvx)); //AVX2
        public static InstInfo Vpblendw    = new InstInfo(0x0E | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vblendpd.ExtendedInfo); //AVX2
        public static InstInfo Vpbroadcastb = new InstInfo(0x78 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vbroadcastss.ExtendedInfo); //AVX2
        public static InstInfo Vpbroadcastd = new InstInfo(0x58 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vbroadcastss.ExtendedInfo); //AVX2
        public static InstInfo Vpbroadcastq = new InstInfo(0x59 | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_E_1, Vbroadcastss.ExtendedInfo); //AVX2
        public static InstInfo Vpbroadcastw = new InstInfo(0x79 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vbroadcastss.ExtendedInfo); //AVX2
        public static InstInfo Vpclmulqdq  = new InstInfo(0x44 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vcmpsd.ExtendedInfo); //AVX+PCLMULQDQ
        public static InstInfo Vpcmov      = new InstInfo(0xA2 | InstOpCode_MM_01000, new ExtendedInstructionInfo(InstructionEncoding.XopRvrmRvmr_P, new[] { InstOpXy, InstOpXy, InstOpXyMem, InstOpXyMem }, InstFlagAvx)); //XOP
        public static InstInfo Vpcmpeqb    = new InstInfo(0x74 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpcmpeqd    = new InstInfo(0x76 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpcmpeqq    = new InstInfo(0x29 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpcmpeqw    = new InstInfo(0x75 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpcmpestri  = new InstInfo(0x61 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vaeskeygenassist.ExtendedInfo); //AVX
        public static InstInfo Vpcmpestrm  = new InstInfo(0x60 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vaeskeygenassist.ExtendedInfo); //AVX
        public static InstInfo Vpcmpgtb    = new InstInfo(0x64 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpcmpgtd    = new InstInfo(0x66 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpcmpgtq    = new InstInfo(0x37 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpcmpgtw    = new InstInfo(0x65 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpcmpistri  = new InstInfo(0x63 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vaeskeygenassist.ExtendedInfo); //AVX
        public static InstInfo Vpcmpistrm  = new InstInfo(0x62 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vaeskeygenassist.ExtendedInfo); //AVX
        public static InstInfo Vpcomb      = new InstInfo(0xCC | InstOpCode_MM_01000, new ExtendedInstructionInfo(InstructionEncoding.XopRvmi, new[] { InstOpXmm, InstOpXmm, InstOpXmmMem, InstOpImm }, InstFlagAvx)); //XOP
        public static InstInfo Vpcomd      = new InstInfo(0xCE | InstOpCode_MM_01000, Vpcomb.ExtendedInfo); //XOP
        public static InstInfo Vpcomq      = new InstInfo(0xCF | InstOpCode_MM_01000, Vpcomb.ExtendedInfo); //XOP
        public static InstInfo Vpcomub     = new InstInfo(0xEC | InstOpCode_MM_01000, Vpcomb.ExtendedInfo); //XOP
        public static InstInfo Vpcomud     = new InstInfo(0xEE | InstOpCode_MM_01000, Vpcomb.ExtendedInfo); //XOP
        public static InstInfo Vpcomuq     = new InstInfo(0xEF | InstOpCode_MM_01000, Vpcomb.ExtendedInfo); //XOP
        public static InstInfo Vpcomuw     = new InstInfo(0xED | InstOpCode_MM_01000, Vpcomb.ExtendedInfo); //XOP
        public static InstInfo Vpcomw      = new InstInfo(0xCD | InstOpCode_MM_01000, Vpcomb.ExtendedInfo); //XOP
        public static InstInfo Vperm2f128  = new InstInfo(0x06 | InstOpCode_PP_66 | InstOpCode_MM_0F3A | InstTable_L_L, new ExtendedInstructionInfo(InstructionEncoding.AvxRvmi, new[] { InstOpYmm, InstOpYmm, InstOpYmmMem, InstOpImm }, InstFlagAvx)); //AVX
        public static InstInfo Vperm2i128  = new InstInfo(0x46 | InstOpCode_PP_66 | InstOpCode_MM_0F3A | InstTable_L_L, Vperm2f128.ExtendedInfo); //AVX2
        public static InstInfo Vpermd      = new InstInfo(0x36 | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_L_L, new ExtendedInstructionInfo(InstructionEncoding.AvxRvm, new[] { InstOpYmm, InstOpYmm, InstOpYmmMem }, InstFlagAvx)); //AVX2
        public static InstInfo Vpermil2pd  = new InstInfo(0x49 | InstOpCode_PP_66 | InstOpCode_MM_00011, new ExtendedInstructionInfo(InstructionEncoding.AvxRvrmRvmr_P, new[] { InstOpXy, InstOpXy, InstOpXyMem, InstOpXyMem }, InstFlagAvx)); //XOP
        public static InstInfo Vpermil2ps  = new InstInfo(0x48 | InstOpCode_PP_66 | InstOpCode_MM_00011, Vpermil2pd.ExtendedInfo); //XOP
        public static InstInfo Vpermilpd   = new InstInfo(0x0D | InstOpCode_PP_66 | InstOpCode_MM_0F38, new ExtendedInstructionInfo(InstructionEncoding.AvxRvmRmi_P, new[] { InstOpXy, InstOpXyMem, InstOpXyMem | InstOpImm }, InstFlagAvx, 0, InstOpCode_PP_66 | InstOpCode_MM_0F3A | 0x05U )); //AVX 
        public static InstInfo Vpermilps   = new InstInfo(0x0C | InstOpCode_PP_66 | InstOpCode_MM_0F38, new ExtendedInstructionInfo(InstructionEncoding.AvxRvmRmi_P, new[] { InstOpXy, InstOpXyMem, InstOpXyMem | InstOpImm }, InstFlagAvx, 0, InstOpCode_PP_66 | InstOpCode_MM_0F3A | 0x04U )); //AVX 
        public static InstInfo Vpermpd     = new InstInfo(0x01 | InstOpCode_PP_66 | InstOpCode_MM_0F3A | InstTable_L_L | InstTable_W_W, new ExtendedInstructionInfo(InstructionEncoding.AvxRmi, new[] { InstOpYmm, InstOpYmmMem, InstOpImm }, InstFlagAvx)); //AVX2|
        public static InstInfo Vpermps     = new InstInfo(0x16 | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_L_L, Vpermd.ExtendedInfo); //AVX2
        public static InstInfo Vpermq      = new InstInfo(0x00 | InstOpCode_PP_66 | InstOpCode_MM_0F3A | InstTable_L_L | InstTable_W_W, Vpermpd.ExtendedInfo); //AVX2|
        public static InstInfo Vpextrb     = new InstInfo(0x14 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, new ExtendedInstructionInfo(InstructionEncoding.AvxMri, new[] { InstOpGqdwbMem, InstOpXmm, InstOpImm }, InstFlagAvx)); //AVX
        public static InstInfo Vpextrd     = new InstInfo(0x16 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vextractps.ExtendedInfo); //AVX
        public static InstInfo Vpextrq     = new InstInfo(0x16 | InstOpCode_PP_66 | InstOpCode_MM_0F3A | InstTable_W_W, new ExtendedInstructionInfo(InstructionEncoding.AvxMri, new[] { InstOpGqMem, InstOpXmm, InstOpImm }, InstFlagAvx)); //AVX (x64 only)
        public static InstInfo Vpextrw     = new InstInfo(0x15 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, new ExtendedInstructionInfo(InstructionEncoding.AvxMri, new[] { InstOpGqdwMem, InstOpXmm, InstOpImm }, InstFlagAvx)); //AVX
        public static InstInfo Vpgatherdd  = new InstInfo(0x90 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vgatherdpd.ExtendedInfo); //AVX2
        public static InstInfo Vpgatherdq  = new InstInfo(0x90 | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vgatherdpd.ExtendedInfo); //AVX2
        public static InstInfo Vpgatherqd  = new InstInfo(0x91 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vgatherqps.ExtendedInfo); //AVX2
        public static InstInfo Vpgatherqq  = new InstInfo(0x91 | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vgatherdpd.ExtendedInfo); //AVX2
        public static InstInfo Vphaddbd    = new InstInfo(0xC2 | InstOpCode_MM_01001, Vfrczsd.ExtendedInfo); //XOP
        public static InstInfo Vphaddbq    = new InstInfo(0xC3 | InstOpCode_MM_01001, Vfrczsd.ExtendedInfo); //XOP
        public static InstInfo Vphaddbw    = new InstInfo(0xC1 | InstOpCode_MM_01001, Vfrczsd.ExtendedInfo); //XOP
        public static InstInfo Vphaddd     = new InstInfo(0x02 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vphadddq    = new InstInfo(0xCB | InstOpCode_MM_01001, Vfrczsd.ExtendedInfo); //XOP
        public static InstInfo Vphaddsw    = new InstInfo(0x03 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vphaddubd   = new InstInfo(0xD2 | InstOpCode_MM_01001, Vfrczsd.ExtendedInfo); //XOP
        public static InstInfo Vphaddubq   = new InstInfo(0xD3 | InstOpCode_MM_01001, Vfrczsd.ExtendedInfo); //XOP
        public static InstInfo Vphaddubw   = new InstInfo(0xD1 | InstOpCode_MM_01001, Vfrczsd.ExtendedInfo); //XOP
        public static InstInfo Vphaddudq   = new InstInfo(0xDB | InstOpCode_MM_01001, Vfrczsd.ExtendedInfo); //XOP
        public static InstInfo Vphadduwd   = new InstInfo(0xD6 | InstOpCode_MM_01001, Vfrczsd.ExtendedInfo); //XOP
        public static InstInfo Vphadduwq   = new InstInfo(0xD7 | InstOpCode_MM_01001, Vfrczsd.ExtendedInfo); //XOP
        public static InstInfo Vphaddw     = new InstInfo(0x01 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vphaddwd    = new InstInfo(0xC6 | InstOpCode_MM_01001, Vfrczsd.ExtendedInfo); //XOP
        public static InstInfo Vphaddwq    = new InstInfo(0xC7 | InstOpCode_MM_01001, Vfrczsd.ExtendedInfo); //XOP
        public static InstInfo Vphminposuw = new InstInfo(0x41 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaesimc.ExtendedInfo); //AVX
        public static InstInfo Vphsubbw    = new InstInfo(0xE1 | InstOpCode_MM_01001, Vfrczsd.ExtendedInfo); //XOP
        public static InstInfo Vphsubd     = new InstInfo(0x06 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vphsubdq    = new InstInfo(0xE3 | InstOpCode_MM_01001, Vfrczsd.ExtendedInfo); //XOP
        public static InstInfo Vphsubsw    = new InstInfo(0x07 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vphsubw     = new InstInfo(0x05 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vphsubwd    = new InstInfo(0xE2 | InstOpCode_MM_01001, Vfrczsd.ExtendedInfo); //XOP
        public static InstInfo Vpinsrb     = new InstInfo(0x20 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, new ExtendedInstructionInfo(InstructionEncoding.AvxRvmi, new[] { InstOpXmm, InstOpXmm, InstOpGqdwbMem, InstOpImm }, InstFlagAvx)); //AVX
        public static InstInfo Vpinsrd     = new InstInfo(0x22 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, new ExtendedInstructionInfo(InstructionEncoding.AvxRvmi, new[] { InstOpXmm, InstOpXmm, InstOpGqdMem, InstOpImm }, InstFlagAvx)); //AVX
        public static InstInfo Vpinsrq     = new InstInfo(0x22 | InstOpCode_PP_66 | InstOpCode_MM_0F3A | InstTable_W_W, new ExtendedInstructionInfo(InstructionEncoding.AvxRvmi, new[] { InstOpXmm, InstOpXmm, InstOpGqMem, InstOpImm }, InstFlagAvx)); //AVX (x64 only)
        public static InstInfo Vpinsrw     = new InstInfo(0xC4 | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRvmi, new[] { InstOpXmm, InstOpXmm, InstOpGqdwMem, InstOpImm }, InstFlagAvx)); //AVX
        public static InstInfo Vpmacsdd    = new InstInfo(0x9E | InstOpCode_MM_01000, new ExtendedInstructionInfo(InstructionEncoding.XopRvmr, new[] { InstOpXmm, InstOpXmm, InstOpXmmMem, InstOpXmm }, InstFlagAvx)); //XOP
        public static InstInfo Vpmacsdqh   = new InstInfo(0x9F | InstOpCode_MM_01000, Vpmacsdd.ExtendedInfo); //XOP
        public static InstInfo Vpmacsdql   = new InstInfo(0x97 | InstOpCode_MM_01000, Vpmacsdd.ExtendedInfo); //XOP
        public static InstInfo Vpmacssdd   = new InstInfo(0x8E | InstOpCode_MM_01000, Vpmacsdd.ExtendedInfo); //XOP
        public static InstInfo Vpmacssdqh  = new InstInfo(0x8F | InstOpCode_MM_01000, Vpmacsdd.ExtendedInfo); //XOP
        public static InstInfo Vpmacssdql  = new InstInfo(0x87 | InstOpCode_MM_01000, Vpmacsdd.ExtendedInfo); //XOP
        public static InstInfo Vpmacsswd   = new InstInfo(0x86 | InstOpCode_MM_01000, Vpmacsdd.ExtendedInfo); //XOP
        public static InstInfo Vpmacssww   = new InstInfo(0x85 | InstOpCode_MM_01000, Vpmacsdd.ExtendedInfo); //XOP
        public static InstInfo Vpmacswd    = new InstInfo(0x96 | InstOpCode_MM_01000, Vpmacsdd.ExtendedInfo); //XOP
        public static InstInfo Vpmacsww    = new InstInfo(0x95 | InstOpCode_MM_01000, Vpmacsdd.ExtendedInfo); //XOP
        public static InstInfo Vpmadcsswd  = new InstInfo(0xA6 | InstOpCode_MM_01000, Vpmacsdd.ExtendedInfo); //XOP
        public static InstInfo Vpmadcswd   = new InstInfo(0xB6 | InstOpCode_MM_01000, Vpmacsdd.ExtendedInfo); //XOP
        public static InstInfo Vpmaddubsw  = new InstInfo(0x04 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpmaddwd    = new InstInfo(0xF5 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpmaskmovd  = new InstInfo(0x8C | InstOpCode_PP_66 | InstOpCode_MM_0F38, new ExtendedInstructionInfo(InstructionEncoding.AvxRvmMvr_P, new[] { InstOpXyMem, InstOpXy, InstOpXyMem }, InstFlagAvx, 0, InstOpCode_PP_66 | InstOpCode_MM_0F38 | (0x8E) )); //AVX2 
        public static InstInfo Vpmaskmovq  = new InstInfo(0x8C | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vpmaskmovd.ExtendedInfo); //AVX2
        public static InstInfo Vpmaxsb     = new InstInfo(0x3C | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpmaxsd     = new InstInfo(0x3D | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpmaxsw     = new InstInfo(0xEE | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpmaxub     = new InstInfo(0xDE | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpmaxud     = new InstInfo(0x3F | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpmaxuw     = new InstInfo(0x3E | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpminsb     = new InstInfo(0x38 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpminsd     = new InstInfo(0x39 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpminsw     = new InstInfo(0xEA | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpminub     = new InstInfo(0xDA | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpminud     = new InstInfo(0x3B | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpminuw     = new InstInfo(0x3A | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpmovmskb   = new InstInfo(0xD7 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vmovmskpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpmovsxbd   = new InstInfo(0x21 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vcvtdq2ps.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpmovsxbq   = new InstInfo(0x22 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vcvtdq2ps.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpmovsxbw   = new InstInfo(0x20 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vcvtdq2ps.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpmovsxdq   = new InstInfo(0x25 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vcvtdq2ps.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpmovsxwd   = new InstInfo(0x23 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vcvtdq2ps.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpmovsxwq   = new InstInfo(0x24 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vcvtdq2ps.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpmovzxbd   = new InstInfo(0x31 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vcvtdq2ps.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpmovzxbq   = new InstInfo(0x32 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vcvtdq2ps.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpmovzxbw   = new InstInfo(0x30 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vcvtdq2ps.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpmovzxdq   = new InstInfo(0x35 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vcvtdq2ps.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpmovzxwd   = new InstInfo(0x33 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vcvtdq2ps.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpmovzxwq   = new InstInfo(0x34 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vcvtdq2ps.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpmuldq     = new InstInfo(0x28 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpmulhrsw   = new InstInfo(0x0B | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpmulhuw    = new InstInfo(0xE4 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpmulhw     = new InstInfo(0xE5 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpmulld     = new InstInfo(0x40 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpmullw     = new InstInfo(0xD5 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpmuludq    = new InstInfo(0xF4 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpor        = new InstInfo(0xEB | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpperm      = new InstInfo(0xA3 | InstOpCode_MM_01000, new ExtendedInstructionInfo(InstructionEncoding.XopRvrmRvmr, new[] { InstOpXmm, InstOpXmm, InstOpXmmMem, InstOpXmmMem }, InstFlagAvx)); //XOP
        public static InstInfo Vprotb      = new InstInfo(0x90 | InstOpCode_MM_01001, new ExtendedInstructionInfo(InstructionEncoding.XopRvmRmi, new[] { InstOpXmm, InstOpXmmMem, InstOpXmmMem | InstOpImm }, InstFlagAvx, 0, InstOpCode_MM_01000 | (0xC0) )); //XOP 
        public static InstInfo Vprotd      = new InstInfo(0x92 | InstOpCode_MM_01001, new ExtendedInstructionInfo(InstructionEncoding.XopRvmRmi, new[] { InstOpXmm, InstOpXmmMem, InstOpXmmMem | InstOpImm }, InstFlagAvx, 0, InstOpCode_MM_01000 | (0xC2) )); //XOP 
        public static InstInfo Vprotq      = new InstInfo(0x93 | InstOpCode_MM_01001, new ExtendedInstructionInfo(InstructionEncoding.XopRvmRmi, new[] { InstOpXmm, InstOpXmmMem, InstOpXmmMem | InstOpImm }, InstFlagAvx, 0, InstOpCode_MM_01000 | (0xC3) )); //XOP 
        public static InstInfo Vprotw      = new InstInfo(0x91 | InstOpCode_MM_01001, new ExtendedInstructionInfo(InstructionEncoding.XopRvmRmi, new[] { InstOpXmm, InstOpXmmMem, InstOpXmmMem | InstOpImm }, InstFlagAvx, 0, InstOpCode_MM_01000 | (0xC1) )); //XOP 
        public static InstInfo Vpsadbw     = new InstInfo(0xF6 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpshab      = new InstInfo(0x98 | InstOpCode_MM_01001, new ExtendedInstructionInfo(InstructionEncoding.XopRvmRmv, new[] { InstOpXmm, InstOpXmmMem, InstOpXmmMem }, InstFlagAvx)); //XOP
        public static InstInfo Vpshad      = new InstInfo(0x9A | InstOpCode_MM_01001, Vpshab.ExtendedInfo); //XOP
        public static InstInfo Vpshaq      = new InstInfo(0x9B | InstOpCode_MM_01001, Vpshab.ExtendedInfo); //XOP
        public static InstInfo Vpshaw      = new InstInfo(0x99 | InstOpCode_MM_01001, Vpshab.ExtendedInfo); //XOP
        public static InstInfo Vpshlb      = new InstInfo(0x94 | InstOpCode_MM_01001, Vpshab.ExtendedInfo); //XOP
        public static InstInfo Vpshld      = new InstInfo(0x96 | InstOpCode_MM_01001, Vpshab.ExtendedInfo); //XOP
        public static InstInfo Vpshlq      = new InstInfo(0x97 | InstOpCode_MM_01001, Vpshab.ExtendedInfo); //XOP
        public static InstInfo Vpshlw      = new InstInfo(0x95 | InstOpCode_MM_01001, Vpshab.ExtendedInfo); //XOP
        public static InstInfo Vpshufb     = new InstInfo(0x00 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpshufd     = new InstInfo(0x70 | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRmi_P, new[] { InstOpXy, InstOpXyMem, InstOpImm }, InstFlagAvx)); //AVX/AVX2
        public static InstInfo Vpshufhw    = new InstInfo(0x70 | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Vpshufd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpshuflw    = new InstInfo(0x70 | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Vpshufd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpsignb     = new InstInfo(0x08 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpsignd     = new InstInfo(0x0A | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpsignw     = new InstInfo(0x09 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpslld      = new InstInfo(0xF2 | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRvmVmi_P, new[] { InstOpXy, InstOpXyMem, InstOpXyMem | InstOpImm }, InstFlagAvx, 0, InstOpCode_PP_66 | InstOpCode_MM_0F00 | 0x72U | (6L << (int)InstOpCode_O_Shift) )); //AVX/AVX2
        public static InstInfo Vpslldq     = new InstInfo(0x73 | InstOpCode_PP_66 | InstOpCode_MM_0F00 | (7L << (int)InstOpCode_O_Shift), new ExtendedInstructionInfo(InstructionEncoding.AvxVmi_P, new[] { InstOpXy, InstOpXyMem, InstOpImm }, InstFlagAvx)); //AVX/AVX2 
        public static InstInfo Vpsllq      = new InstInfo(0xF3 | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRvmVmi_P, new[] { InstOpXy, InstOpXyMem, InstOpXyMem | InstOpImm }, InstFlagAvx, 0, InstOpCode_PP_66 | InstOpCode_MM_0F00 | 0x73U | (6L << (int)InstOpCode_O_Shift) )); //AVX/AVX2
        public static InstInfo Vpsllvd     = new InstInfo(0x47 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpsllvq     = new InstInfo(0x47 | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpsllw      = new InstInfo(0xF1 | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRvmVmi_P, new[] { InstOpXy, InstOpXyMem, InstOpXyMem | InstOpImm }, InstFlagAvx, 0, InstOpCode_PP_66 | InstOpCode_MM_0F00 | 0x71U | (6L << (int)InstOpCode_O_Shift) )); //AVX/AVX2
        public static InstInfo Vpsrad      = new InstInfo(0xE2 | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRvmVmi_P, new[] { InstOpXy, InstOpXyMem, InstOpXyMem | InstOpImm }, InstFlagAvx, 0, InstOpCode_PP_66 | InstOpCode_MM_0F00 | 0x72U | (4L << (int)InstOpCode_O_Shift) )); //AVX/AVX2
        public static InstInfo Vpsravd     = new InstInfo(0x46 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpsraw      = new InstInfo(0xE1 | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRvmVmi_P, new[] { InstOpXy, InstOpXyMem, InstOpXyMem | InstOpImm }, InstFlagAvx, 0, InstOpCode_PP_66 | InstOpCode_MM_0F00 | 0x71U | (4L << (int)InstOpCode_O_Shift) )); //AVX/AVX2
        public static InstInfo Vpsrld      = new InstInfo(0xD2 | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRvmVmi_P, new[] { InstOpXy, InstOpXyMem, InstOpXyMem | InstOpImm }, InstFlagAvx, 0, InstOpCode_PP_66 | InstOpCode_MM_0F00 | 0x72U | (2L << (int)InstOpCode_O_Shift) )); //AVX/AVX2
        public static InstInfo Vpsrldq     = new InstInfo(0x73 | InstOpCode_PP_66 | InstOpCode_MM_0F00 | (3L << (int)InstOpCode_O_Shift), Vpslldq.ExtendedInfo); //AVX/AVX2 
        public static InstInfo Vpsrlq      = new InstInfo(0xD3 | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRvmVmi_P, new[] { InstOpXy, InstOpXyMem, InstOpXyMem | InstOpImm }, InstFlagAvx, 0, InstOpCode_PP_66 | InstOpCode_MM_0F00 | 0x73U | (2L << (int)InstOpCode_O_Shift) )); //AVX/AVX2
        public static InstInfo Vpsrlvd     = new InstInfo(0x45 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpsrlvq     = new InstInfo(0x45 | InstOpCode_PP_66 | InstOpCode_MM_0F38 | InstTable_W_W, Vaddpd.ExtendedInfo); //AVX2
        public static InstInfo Vpsrlw      = new InstInfo(0xD1 | InstOpCode_PP_66 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.AvxRvmVmi_P, new[] { InstOpXy, InstOpXyMem, InstOpXyMem | InstOpImm }, InstFlagAvx, 0, InstOpCode_PP_66 | InstOpCode_MM_0F00 | 0x71U | (2L << (int)InstOpCode_O_Shift) )); //AVX/AVX2
        public static InstInfo Vpsubb      = new InstInfo(0xF8 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpsubd      = new InstInfo(0xFA | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpsubq      = new InstInfo(0xFB | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpsubsb     = new InstInfo(0xE8 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpsubsw     = new InstInfo(0xE9 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpsubusb    = new InstInfo(0xD8 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpsubusw    = new InstInfo(0xD9 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpsubw      = new InstInfo(0xF9 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vptest      = new InstInfo(0x17 | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vcvtdq2ps.ExtendedInfo); //AVX
        public static InstInfo Vpunpckhbw  = new InstInfo(0x68 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpunpckhdq  = new InstInfo(0x6A | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpunpckhqdq = new InstInfo(0x6D | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpunpckhwd  = new InstInfo(0x69 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpunpcklbw  = new InstInfo(0x60 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpunpckldq  = new InstInfo(0x62 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpunpcklqdq = new InstInfo(0x6C | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpunpcklwd  = new InstInfo(0x61 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vpxor       = new InstInfo(0xEF | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX/AVX2
        public static InstInfo Vrcpps      = new InstInfo(0x53 | InstOpCode_MM_0F00, Vcvtdq2ps.ExtendedInfo); //AVX
        public static InstInfo Vrcpss      = new InstInfo(0x53 | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Vaddsd.ExtendedInfo); //AVX
        public static InstInfo Vroundpd    = new InstInfo(0x09 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vpshufd.ExtendedInfo); //AVX
        public static InstInfo Vroundps    = new InstInfo(0x08 | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vpshufd.ExtendedInfo); //AVX
        public static InstInfo Vroundsd    = new InstInfo(0x0B | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vcmpsd.ExtendedInfo); //AVX
        public static InstInfo Vroundss    = new InstInfo(0x0A | InstOpCode_PP_66 | InstOpCode_MM_0F3A, Vcmpsd.ExtendedInfo); //AVX
        public static InstInfo Vrsqrtps    = new InstInfo(0x52 | InstOpCode_MM_0F00, Vcvtdq2ps.ExtendedInfo); //AVX
        public static InstInfo Vrsqrtss    = new InstInfo(0x52 | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Vaddsd.ExtendedInfo); //AVX
        public static InstInfo Vshufpd     = new InstInfo(0xC6 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vblendpd.ExtendedInfo); //AVX
        public static InstInfo Vshufps     = new InstInfo(0xC6 | InstOpCode_MM_0F00, Vblendpd.ExtendedInfo); //AVX
        public static InstInfo Vsqrtpd     = new InstInfo(0x51 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vcvtdq2ps.ExtendedInfo); //AVX
        public static InstInfo Vsqrtps     = new InstInfo(0x51 | InstOpCode_MM_0F00, Vcvtdq2ps.ExtendedInfo); //AVX
        public static InstInfo Vsqrtsd     = new InstInfo(0x51 | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Vaddsd.ExtendedInfo); //AVX
        public static InstInfo Vsqrtss     = new InstInfo(0x51 | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Vaddsd.ExtendedInfo); //AVX
        public static InstInfo Vstmxcsr    = new InstInfo(0xAE | InstOpCode_MM_0F00 | (3L << (int)InstOpCode_O_Shift), Vldmxcsr.ExtendedInfo); //AVX
        public static InstInfo Vsubpd      = new InstInfo(0x5C | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vsubps      = new InstInfo(0x5C | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vsubsd      = new InstInfo(0x5C | InstOpCode_PP_F2 | InstOpCode_MM_0F00, Vaddsd.ExtendedInfo); //AVX
        public static InstInfo Vsubss      = new InstInfo(0x5C | InstOpCode_PP_F3 | InstOpCode_MM_0F00, Vaddsd.ExtendedInfo); //AVX
        public static InstInfo Vtestpd     = new InstInfo(0x0F | InstOpCode_PP_66 | InstOpCode_MM_0F38, new ExtendedInstructionInfo(InstructionEncoding.AvxRm_P, new[] { InstOpXy, InstOpXyMem }, InstFlagTest)); //AVX
        public static InstInfo Vtestps     = new InstInfo(0x0E | InstOpCode_PP_66 | InstOpCode_MM_0F38, Vtestpd.ExtendedInfo); //AVX
        public static InstInfo Vucomisd    = new InstInfo(0x2E | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaesimc.ExtendedInfo); //AVX
        public static InstInfo Vucomiss    = new InstInfo(0x2E | InstOpCode_MM_0F00, Vaesimc.ExtendedInfo); //AVX
        public static InstInfo Vunpckhpd   = new InstInfo(0x15 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vunpckhps   = new InstInfo(0x15 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vunpcklpd   = new InstInfo(0x14 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vunpcklps   = new InstInfo(0x14 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vxorpd      = new InstInfo(0x57 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vxorps      = new InstInfo(0x57 | InstOpCode_MM_0F00, Vaddpd.ExtendedInfo); //AVX
        public static InstInfo Vzeroall    = new InstInfo(0x77 | InstOpCode_MM_0F00 | InstTable_L_L, new ExtendedInstructionInfo(InstructionEncoding.AvxOp, null, InstFlagAvx)); //AVX
        public static InstInfo Vzeroupper  = new InstInfo(0x77 | InstOpCode_MM_0F00, Vzeroall.ExtendedInfo); //AVX
        public static InstInfo Wrfsbase    = new InstInfo(0xAE | InstOpCode_PP_F3 | InstOpCode_MM_0F00 | (2L << (int)InstOpCode_O_Shift), new ExtendedInstructionInfo(InstructionEncoding.X86Rm, new[] { InstOpGqd })); //FSGSBASE (x64) 
        public static InstInfo Wrgsbase    = new InstInfo(0xAE | InstOpCode_PP_F3 | InstOpCode_MM_0F00 | (3L << (int)InstOpCode_O_Shift), Wrfsbase.ExtendedInfo); //FSGSBASE (x64) 
        public static InstInfo Xadd        = new InstInfo(0xC0 | InstOpCode_MM_0F00, new ExtendedInstructionInfo(InstructionEncoding.X86Xadd, new[] { InstOpGqdwbMem, InstOpGqdwb }, InstFlagXchg | InstFlagLock)); //X86/X64 (i486+)
        public static InstInfo Xchg        = new InstInfo(0x86, new ExtendedInstructionInfo(InstructionEncoding.X86Xchg, new[] { InstOpGqdwbMem, InstOpGqdwb }, InstFlagXchg | InstFlagLock)); //X86/X64
        public static InstInfo Xgetbv      = new InstInfo(0xD0 | InstOpCode_MM_0F01, Cbw.ExtendedInfo); //XSAVE
        public static InstInfo Xor         = new InstInfo(0x30 | (6L << (int)InstOpCode_O_Shift), Adc.ExtendedInfo); //X86/X64
        public static InstInfo Xorpd       = new InstInfo(0x57 | InstOpCode_PP_66 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE2
        public static InstInfo Xorps       = new InstInfo(0x57 | InstOpCode_MM_0F00, Addpd.ExtendedInfo); //SSE
        public static InstInfo Xrstor      = new InstInfo(0xAE | InstOpCode_MM_0F00 | (5L << (int)InstOpCode_O_Shift), Cmpxchg16b.ExtendedInfo); //XSAVE
        public static InstInfo Xrstor64    = new InstInfo(0xAE | InstOpCode_MM_0F00 | (5L << (int)InstOpCode_O_Shift) | InstTable_W_W, Cmpxchg16b.ExtendedInfo); //XSAVE
        public static InstInfo Xsave       = new InstInfo(0xAE | InstOpCode_MM_0F00 | (4L << (int)InstOpCode_O_Shift), Cmpxchg16b.ExtendedInfo); //XSAVE
        public static InstInfo Xsave64     = new InstInfo(0xAE | InstOpCode_MM_0F00 | (4L << (int)InstOpCode_O_Shift) | InstTable_W_W, Cmpxchg16b.ExtendedInfo); //XSAVE
        public static InstInfo Xsaveopt    = new InstInfo(0xAE | InstOpCode_MM_0F00 | (6L << (int)InstOpCode_O_Shift), Cmpxchg16b.ExtendedInfo); //XSAVE
        public static InstInfo Xsaveopt64  = new InstInfo(0xAE | InstOpCode_MM_0F00 | (6L << (int)InstOpCode_O_Shift) | InstTable_W_W, Cmpxchg16b.ExtendedInfo); //XSAVE
        public static InstInfo Xsetbv      = new InstInfo(0xD1 | InstOpCode_MM_0F01, Cbw.ExtendedInfo); //XSAVE

        //static Inst()
        //{
        //    var fieldInfos = typeof(Inst).GetFields();
        //    foreach (var fieldInfo in fieldInfos)
        //    {
        //        InstInfo.Insts.Add(fieldInfo.Name, (InstInfo)fieldInfo.GetValue(null));
        //    }
        //}
    }
}
